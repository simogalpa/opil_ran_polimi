# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcr_shared/LCRStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class LCRStatus(genpy.Message):
  _md5sum = "a0b17cfb00f69212db580b1be903bfd6"
  _type = "lcr_shared/LCRStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 virtual_object_version_id
string mission_id
Header wcs_adapter_ros_header

#Possibili valori di status 
int8 SHUTDOWN = 0 #robot in fase di arresto o riavvio
int8 POWERED = 1  #tasto power premuto
int8 SYNCHRONIZING = 2 #arrivata richiesta di sincronizzazione
int8 LOCALIZING = 3 #in fase di setup. Il tasto run è premuto ma il robot non è stato ancora localizzato.
int8 RUN = 4 #robot localizzato e funzionante, il comando del robot è in carico alla GUI Onit.
int8 LOST = 5 #robot perso
int8 CHARGING = 6 #robot in fase di ricarica
int8 LOCALIZATION_REQUIRED = 7 #il robot deve essere localizzato con un tag
int8 ECO = 8 #modalità eco attiva
int8 STATUS_SIZE = 9 #delimiter of status size

# informazioni aggiuntive per il WCS adapter: *_info
int8 RUNNING = 0
int8 RESTART = 1
int8 STOPPED = 2

int8 status
int32 tag_seen # -1 , nessun tag visto, altrimenti id tag
geometry_msgs/Pose position
float64 yaw
Header navigation_header

int8 error_type #0 no error
string error_id
Header error_header

bool emergenza #bottone premuto
bool bump_front
bool bump_rear
bool fall_front
bool fall_rear
bool motore_dx_fail #surriscaldamento o corto
bool motore_sx_fail #surriscaldamento o corto
bool errore_int_1 #errore elettronico irrecuperabile
bool errore_int_2 #errore elettronico irrecuperabile
bool battery_fail #tensione di batteria troppo bassa
int32 battery_power #percentuale
bool recharge_found
bool recharge_on
bool recharge_ok
Header hardware_status_header

bool serial_ok
int8 serial_info
Header serial_header

bool laser_ok
int8 laser_info
Header laser_header

string planner_status
int8 planner_info

string controller_status
int32 nextNode
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  SHUTDOWN = 0
  POWERED = 1
  SYNCHRONIZING = 2
  LOCALIZING = 3
  RUN = 4
  LOST = 5
  CHARGING = 6
  LOCALIZATION_REQUIRED = 7
  ECO = 8
  STATUS_SIZE = 9
  RUNNING = 0
  RESTART = 1
  STOPPED = 2

  __slots__ = ['virtual_object_version_id','mission_id','wcs_adapter_ros_header','status','tag_seen','position','yaw','navigation_header','error_type','error_id','error_header','emergenza','bump_front','bump_rear','fall_front','fall_rear','motore_dx_fail','motore_sx_fail','errore_int_1','errore_int_2','battery_fail','battery_power','recharge_found','recharge_on','recharge_ok','hardware_status_header','serial_ok','serial_info','serial_header','laser_ok','laser_info','laser_header','planner_status','planner_info','controller_status','nextNode']
  _slot_types = ['int32','string','std_msgs/Header','int8','int32','geometry_msgs/Pose','float64','std_msgs/Header','int8','string','std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','int32','bool','bool','bool','std_msgs/Header','bool','int8','std_msgs/Header','bool','int8','std_msgs/Header','string','int8','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       virtual_object_version_id,mission_id,wcs_adapter_ros_header,status,tag_seen,position,yaw,navigation_header,error_type,error_id,error_header,emergenza,bump_front,bump_rear,fall_front,fall_rear,motore_dx_fail,motore_sx_fail,errore_int_1,errore_int_2,battery_fail,battery_power,recharge_found,recharge_on,recharge_ok,hardware_status_header,serial_ok,serial_info,serial_header,laser_ok,laser_info,laser_header,planner_status,planner_info,controller_status,nextNode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LCRStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.virtual_object_version_id is None:
        self.virtual_object_version_id = 0
      if self.mission_id is None:
        self.mission_id = ''
      if self.wcs_adapter_ros_header is None:
        self.wcs_adapter_ros_header = std_msgs.msg.Header()
      if self.status is None:
        self.status = 0
      if self.tag_seen is None:
        self.tag_seen = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Pose()
      if self.yaw is None:
        self.yaw = 0.
      if self.navigation_header is None:
        self.navigation_header = std_msgs.msg.Header()
      if self.error_type is None:
        self.error_type = 0
      if self.error_id is None:
        self.error_id = ''
      if self.error_header is None:
        self.error_header = std_msgs.msg.Header()
      if self.emergenza is None:
        self.emergenza = False
      if self.bump_front is None:
        self.bump_front = False
      if self.bump_rear is None:
        self.bump_rear = False
      if self.fall_front is None:
        self.fall_front = False
      if self.fall_rear is None:
        self.fall_rear = False
      if self.motore_dx_fail is None:
        self.motore_dx_fail = False
      if self.motore_sx_fail is None:
        self.motore_sx_fail = False
      if self.errore_int_1 is None:
        self.errore_int_1 = False
      if self.errore_int_2 is None:
        self.errore_int_2 = False
      if self.battery_fail is None:
        self.battery_fail = False
      if self.battery_power is None:
        self.battery_power = 0
      if self.recharge_found is None:
        self.recharge_found = False
      if self.recharge_on is None:
        self.recharge_on = False
      if self.recharge_ok is None:
        self.recharge_ok = False
      if self.hardware_status_header is None:
        self.hardware_status_header = std_msgs.msg.Header()
      if self.serial_ok is None:
        self.serial_ok = False
      if self.serial_info is None:
        self.serial_info = 0
      if self.serial_header is None:
        self.serial_header = std_msgs.msg.Header()
      if self.laser_ok is None:
        self.laser_ok = False
      if self.laser_info is None:
        self.laser_info = 0
      if self.laser_header is None:
        self.laser_header = std_msgs.msg.Header()
      if self.planner_status is None:
        self.planner_status = ''
      if self.planner_info is None:
        self.planner_info = 0
      if self.controller_status is None:
        self.controller_status = ''
      if self.nextNode is None:
        self.nextNode = 0
    else:
      self.virtual_object_version_id = 0
      self.mission_id = ''
      self.wcs_adapter_ros_header = std_msgs.msg.Header()
      self.status = 0
      self.tag_seen = 0
      self.position = geometry_msgs.msg.Pose()
      self.yaw = 0.
      self.navigation_header = std_msgs.msg.Header()
      self.error_type = 0
      self.error_id = ''
      self.error_header = std_msgs.msg.Header()
      self.emergenza = False
      self.bump_front = False
      self.bump_rear = False
      self.fall_front = False
      self.fall_rear = False
      self.motore_dx_fail = False
      self.motore_sx_fail = False
      self.errore_int_1 = False
      self.errore_int_2 = False
      self.battery_fail = False
      self.battery_power = 0
      self.recharge_found = False
      self.recharge_on = False
      self.recharge_ok = False
      self.hardware_status_header = std_msgs.msg.Header()
      self.serial_ok = False
      self.serial_info = 0
      self.serial_header = std_msgs.msg.Header()
      self.laser_ok = False
      self.laser_info = 0
      self.laser_header = std_msgs.msg.Header()
      self.planner_status = ''
      self.planner_info = 0
      self.controller_status = ''
      self.nextNode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.virtual_object_version_id))
      _x = self.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.wcs_adapter_ros_header.seq, _x.wcs_adapter_ros_header.stamp.secs, _x.wcs_adapter_ros_header.stamp.nsecs))
      _x = self.wcs_adapter_ros_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_bi8d3I().pack(_x.status, _x.tag_seen, _x.position.position.x, _x.position.position.y, _x.position.position.z, _x.position.orientation.x, _x.position.orientation.y, _x.position.orientation.z, _x.position.orientation.w, _x.yaw, _x.navigation_header.seq, _x.navigation_header.stamp.secs, _x.navigation_header.stamp.nsecs))
      _x = self.navigation_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.error_type))
      _x = self.error_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.error_header.seq, _x.error_header.stamp.secs, _x.error_header.stamp.nsecs))
      _x = self.error_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10Bi3B3I().pack(_x.emergenza, _x.bump_front, _x.bump_rear, _x.fall_front, _x.fall_rear, _x.motore_dx_fail, _x.motore_sx_fail, _x.errore_int_1, _x.errore_int_2, _x.battery_fail, _x.battery_power, _x.recharge_found, _x.recharge_on, _x.recharge_ok, _x.hardware_status_header.seq, _x.hardware_status_header.stamp.secs, _x.hardware_status_header.stamp.nsecs))
      _x = self.hardware_status_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bb3I().pack(_x.serial_ok, _x.serial_info, _x.serial_header.seq, _x.serial_header.stamp.secs, _x.serial_header.stamp.nsecs))
      _x = self.serial_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bb3I().pack(_x.laser_ok, _x.laser_info, _x.laser_header.seq, _x.laser_header.stamp.secs, _x.laser_header.stamp.nsecs))
      _x = self.laser_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.planner_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.planner_info))
      _x = self.controller_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.nextNode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.wcs_adapter_ros_header is None:
        self.wcs_adapter_ros_header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Pose()
      if self.navigation_header is None:
        self.navigation_header = std_msgs.msg.Header()
      if self.error_header is None:
        self.error_header = std_msgs.msg.Header()
      if self.hardware_status_header is None:
        self.hardware_status_header = std_msgs.msg.Header()
      if self.serial_header is None:
        self.serial_header = std_msgs.msg.Header()
      if self.laser_header is None:
        self.laser_header = std_msgs.msg.Header()
      end = 0
      start = end
      end += 4
      (self.virtual_object_version_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_id = str[start:end].decode('utf-8')
      else:
        self.mission_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.wcs_adapter_ros_header.seq, _x.wcs_adapter_ros_header.stamp.secs, _x.wcs_adapter_ros_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wcs_adapter_ros_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.wcs_adapter_ros_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 81
      (_x.status, _x.tag_seen, _x.position.position.x, _x.position.position.y, _x.position.position.z, _x.position.orientation.x, _x.position.orientation.y, _x.position.orientation.z, _x.position.orientation.w, _x.yaw, _x.navigation_header.seq, _x.navigation_header.stamp.secs, _x.navigation_header.stamp.nsecs,) = _get_struct_bi8d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.navigation_header.frame_id = str[start:end]
      start = end
      end += 1
      (self.error_type,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_id = str[start:end].decode('utf-8')
      else:
        self.error_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.error_header.seq, _x.error_header.stamp.secs, _x.error_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.error_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.emergenza, _x.bump_front, _x.bump_rear, _x.fall_front, _x.fall_rear, _x.motore_dx_fail, _x.motore_sx_fail, _x.errore_int_1, _x.errore_int_2, _x.battery_fail, _x.battery_power, _x.recharge_found, _x.recharge_on, _x.recharge_ok, _x.hardware_status_header.seq, _x.hardware_status_header.stamp.secs, _x.hardware_status_header.stamp.nsecs,) = _get_struct_10Bi3B3I().unpack(str[start:end])
      self.emergenza = bool(self.emergenza)
      self.bump_front = bool(self.bump_front)
      self.bump_rear = bool(self.bump_rear)
      self.fall_front = bool(self.fall_front)
      self.fall_rear = bool(self.fall_rear)
      self.motore_dx_fail = bool(self.motore_dx_fail)
      self.motore_sx_fail = bool(self.motore_sx_fail)
      self.errore_int_1 = bool(self.errore_int_1)
      self.errore_int_2 = bool(self.errore_int_2)
      self.battery_fail = bool(self.battery_fail)
      self.recharge_found = bool(self.recharge_found)
      self.recharge_on = bool(self.recharge_on)
      self.recharge_ok = bool(self.recharge_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hardware_status_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.hardware_status_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.serial_ok, _x.serial_info, _x.serial_header.seq, _x.serial_header.stamp.secs, _x.serial_header.stamp.nsecs,) = _get_struct_Bb3I().unpack(str[start:end])
      self.serial_ok = bool(self.serial_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serial_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.serial_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.laser_ok, _x.laser_info, _x.laser_header.seq, _x.laser_header.stamp.secs, _x.laser_header.stamp.nsecs,) = _get_struct_Bb3I().unpack(str[start:end])
      self.laser_ok = bool(self.laser_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.laser_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planner_status = str[start:end].decode('utf-8')
      else:
        self.planner_status = str[start:end]
      start = end
      end += 1
      (self.planner_info,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controller_status = str[start:end].decode('utf-8')
      else:
        self.controller_status = str[start:end]
      start = end
      end += 4
      (self.nextNode,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.virtual_object_version_id))
      _x = self.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.wcs_adapter_ros_header.seq, _x.wcs_adapter_ros_header.stamp.secs, _x.wcs_adapter_ros_header.stamp.nsecs))
      _x = self.wcs_adapter_ros_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_bi8d3I().pack(_x.status, _x.tag_seen, _x.position.position.x, _x.position.position.y, _x.position.position.z, _x.position.orientation.x, _x.position.orientation.y, _x.position.orientation.z, _x.position.orientation.w, _x.yaw, _x.navigation_header.seq, _x.navigation_header.stamp.secs, _x.navigation_header.stamp.nsecs))
      _x = self.navigation_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.error_type))
      _x = self.error_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.error_header.seq, _x.error_header.stamp.secs, _x.error_header.stamp.nsecs))
      _x = self.error_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10Bi3B3I().pack(_x.emergenza, _x.bump_front, _x.bump_rear, _x.fall_front, _x.fall_rear, _x.motore_dx_fail, _x.motore_sx_fail, _x.errore_int_1, _x.errore_int_2, _x.battery_fail, _x.battery_power, _x.recharge_found, _x.recharge_on, _x.recharge_ok, _x.hardware_status_header.seq, _x.hardware_status_header.stamp.secs, _x.hardware_status_header.stamp.nsecs))
      _x = self.hardware_status_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bb3I().pack(_x.serial_ok, _x.serial_info, _x.serial_header.seq, _x.serial_header.stamp.secs, _x.serial_header.stamp.nsecs))
      _x = self.serial_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bb3I().pack(_x.laser_ok, _x.laser_info, _x.laser_header.seq, _x.laser_header.stamp.secs, _x.laser_header.stamp.nsecs))
      _x = self.laser_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.planner_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.planner_info))
      _x = self.controller_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.nextNode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.wcs_adapter_ros_header is None:
        self.wcs_adapter_ros_header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Pose()
      if self.navigation_header is None:
        self.navigation_header = std_msgs.msg.Header()
      if self.error_header is None:
        self.error_header = std_msgs.msg.Header()
      if self.hardware_status_header is None:
        self.hardware_status_header = std_msgs.msg.Header()
      if self.serial_header is None:
        self.serial_header = std_msgs.msg.Header()
      if self.laser_header is None:
        self.laser_header = std_msgs.msg.Header()
      end = 0
      start = end
      end += 4
      (self.virtual_object_version_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_id = str[start:end].decode('utf-8')
      else:
        self.mission_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.wcs_adapter_ros_header.seq, _x.wcs_adapter_ros_header.stamp.secs, _x.wcs_adapter_ros_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wcs_adapter_ros_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.wcs_adapter_ros_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 81
      (_x.status, _x.tag_seen, _x.position.position.x, _x.position.position.y, _x.position.position.z, _x.position.orientation.x, _x.position.orientation.y, _x.position.orientation.z, _x.position.orientation.w, _x.yaw, _x.navigation_header.seq, _x.navigation_header.stamp.secs, _x.navigation_header.stamp.nsecs,) = _get_struct_bi8d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.navigation_header.frame_id = str[start:end]
      start = end
      end += 1
      (self.error_type,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_id = str[start:end].decode('utf-8')
      else:
        self.error_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.error_header.seq, _x.error_header.stamp.secs, _x.error_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.error_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.emergenza, _x.bump_front, _x.bump_rear, _x.fall_front, _x.fall_rear, _x.motore_dx_fail, _x.motore_sx_fail, _x.errore_int_1, _x.errore_int_2, _x.battery_fail, _x.battery_power, _x.recharge_found, _x.recharge_on, _x.recharge_ok, _x.hardware_status_header.seq, _x.hardware_status_header.stamp.secs, _x.hardware_status_header.stamp.nsecs,) = _get_struct_10Bi3B3I().unpack(str[start:end])
      self.emergenza = bool(self.emergenza)
      self.bump_front = bool(self.bump_front)
      self.bump_rear = bool(self.bump_rear)
      self.fall_front = bool(self.fall_front)
      self.fall_rear = bool(self.fall_rear)
      self.motore_dx_fail = bool(self.motore_dx_fail)
      self.motore_sx_fail = bool(self.motore_sx_fail)
      self.errore_int_1 = bool(self.errore_int_1)
      self.errore_int_2 = bool(self.errore_int_2)
      self.battery_fail = bool(self.battery_fail)
      self.recharge_found = bool(self.recharge_found)
      self.recharge_on = bool(self.recharge_on)
      self.recharge_ok = bool(self.recharge_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hardware_status_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.hardware_status_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.serial_ok, _x.serial_info, _x.serial_header.seq, _x.serial_header.stamp.secs, _x.serial_header.stamp.nsecs,) = _get_struct_Bb3I().unpack(str[start:end])
      self.serial_ok = bool(self.serial_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serial_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.serial_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.laser_ok, _x.laser_info, _x.laser_header.seq, _x.laser_header.stamp.secs, _x.laser_header.stamp.nsecs,) = _get_struct_Bb3I().unpack(str[start:end])
      self.laser_ok = bool(self.laser_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_header.frame_id = str[start:end].decode('utf-8')
      else:
        self.laser_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planner_status = str[start:end].decode('utf-8')
      else:
        self.planner_status = str[start:end]
      start = end
      end += 1
      (self.planner_info,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controller_status = str[start:end].decode('utf-8')
      else:
        self.controller_status = str[start:end]
      start = end
      end += 4
      (self.nextNode,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_bi8d3I = None
def _get_struct_bi8d3I():
    global _struct_bi8d3I
    if _struct_bi8d3I is None:
        _struct_bi8d3I = struct.Struct("<bi8d3I")
    return _struct_bi8d3I
_struct_10Bi3B3I = None
def _get_struct_10Bi3B3I():
    global _struct_10Bi3B3I
    if _struct_10Bi3B3I is None:
        _struct_10Bi3B3I = struct.Struct("<10Bi3B3I")
    return _struct_10Bi3B3I
_struct_Bb3I = None
def _get_struct_Bb3I():
    global _struct_Bb3I
    if _struct_Bb3I is None:
        _struct_Bb3I = struct.Struct("<Bb3I")
    return _struct_Bb3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
