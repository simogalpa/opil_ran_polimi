# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sim_msgs/RobotState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mars_common_msgs.msg
import industrial_msgs.msg
import sensor_msgs.msg
import sim_msgs.msg
import std_msgs.msg

class RobotState(genpy.Message):
  _md5sum = "45226de6e5930fb93f540273f2dbf9ab"
  _type = "sim_msgs/RobotState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message defining the Robot / AGV status 
Header header
mars_common_msgs/Id vehicle_id
AssignmentId last_terminated_action
industrial_msgs/RobotStatus robot_status
sensor_msgs/BatteryState battery_state
geometry_msgs/Pose2D current_position
geometry_msgs/Twist current_velocity
geometry_msgs/PolygonStamped footprint

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: mars_common_msgs/Id
# Universally Unique Identifier (UUID)
# A UUID is a 128-bit number used to identify information in computer systems. 
# The term globally unique identifier (GUID) is also used. 
# More information: https://en.wikipedia.org/wiki/Universally_unique_identifier
uint8[16] uuid

# optional description of the id
# description can be:
#   - a name
#   - what is descriped by the id
#   - etc.
string description

================================================================================
MSG: sim_msgs/AssignmentId
# Message for the definition of the ids of an Assignment
mars_common_msgs/Id task_id
mars_common_msgs/Id action_id
mars_common_msgs/Id motion_id

================================================================================
MSG: industrial_msgs/RobotStatus
# The RobotStatus message contains low level status information 
# that is specific to an industrial robot controller

# The header frame ID is not used
Header header

# The robot mode captures the operating mode of the robot.  When in
# manual, remote motion is not possible.
industrial_msgs/RobotMode mode

# Estop status: True if robot is e-stopped.  The drives are disabled
# and motion is not possible.  The e-stop condition must be acknowledged
# and cleared before any motion can begin.
industrial_msgs/TriState e_stopped

# Drive power status: True if drives are powered.  Motion commands will 
# automatically enable the drives if required.  Drive power is not requred
# for possible motion
industrial_msgs/TriState drives_powered

# Motion enabled: True if robot motion is possible.
industrial_msgs/TriState motion_possible

# Motion status: True if robot is in motion, otherwise false
industrial_msgs/TriState in_motion

# Error status: True if there is an error condition on the robot. Motion may
# or may not be affected (see motion_possible)
industrial_msgs/TriState in_error

# Error code: Vendor specific error code (non zero indicates error)
int32 error_code

================================================================================
MSG: industrial_msgs/RobotMode
# The Robot mode message encapsulates the mode/teach state of the robot
# Typically this is controlled by the pendant key switch, but not always

int8 val

# enumerated values
int8 UNKNOWN=-1                 # Unknown or unavailable         
int8 MANUAL=1 			 # Teach OR manual mode
int8 AUTO=2                     # Automatic mode


================================================================================
MSG: industrial_msgs/TriState
# The tri-state captures boolean values with the additional state of unknown

int8 val

# enumerated values

# Unknown or unavailable 
int8 UNKNOWN=-1  

# High state                       
int8 TRUE=1
int8 ON=1
int8 ENABLED=1
int8 HIGH=1
int8 CLOSED=1

# Low state
int8 FALSE=0
int8 OFF=0
int8 DISABLED=0
int8 LOW=0
int8 OPEN=0


================================================================================
MSG: sensor_msgs/BatteryState

# Constants are chosen to match the enums in the linux kernel
# defined in include/linux/power_supply.h as of version 3.7
# The one difference is for style reasons the constants are
# all uppercase not mixed case.

# Power supply status constants
uint8 POWER_SUPPLY_STATUS_UNKNOWN = 0
uint8 POWER_SUPPLY_STATUS_CHARGING = 1
uint8 POWER_SUPPLY_STATUS_DISCHARGING = 2
uint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3
uint8 POWER_SUPPLY_STATUS_FULL = 4

# Power supply health constants
uint8 POWER_SUPPLY_HEALTH_UNKNOWN = 0
uint8 POWER_SUPPLY_HEALTH_GOOD = 1
uint8 POWER_SUPPLY_HEALTH_OVERHEAT = 2
uint8 POWER_SUPPLY_HEALTH_DEAD = 3
uint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4
uint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5
uint8 POWER_SUPPLY_HEALTH_COLD = 6
uint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7
uint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8

# Power supply technology (chemistry) constants
uint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0
uint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1
uint8 POWER_SUPPLY_TECHNOLOGY_LION = 2
uint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3
uint8 POWER_SUPPLY_TECHNOLOGY_LIFE = 4
uint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5
uint8 POWER_SUPPLY_TECHNOLOGY_LIMN = 6

Header  header
float32 voltage          # Voltage in Volts (Mandatory)
float32 current          # Negative when discharging (A)  (If unmeasured NaN)
float32 charge           # Current charge in Ah  (If unmeasured NaN)
float32 capacity         # Capacity in Ah (last full capacity)  (If unmeasured NaN)
float32 design_capacity  # Capacity in Ah (design capacity)  (If unmeasured NaN)
float32 percentage       # Charge percentage on 0 to 1 range  (If unmeasured NaN)
uint8   power_supply_status     # The charging status as reported. Values defined above
uint8   power_supply_health     # The battery health metric. Values defined above
uint8   power_supply_technology # The battery chemistry. Values defined above
bool    present          # True if the battery is present

float32[] cell_voltage   # An array of individual cell voltages for each cell in the pack
                         # If individual voltages unknown but number of cells known set each to NaN
string location          # The location into which the battery is inserted. (slot number or plug)
string serial_number     # The best approximation of the battery serial number

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','vehicle_id','last_terminated_action','robot_status','battery_state','current_position','current_velocity','footprint']
  _slot_types = ['std_msgs/Header','mars_common_msgs/Id','sim_msgs/AssignmentId','industrial_msgs/RobotStatus','sensor_msgs/BatteryState','geometry_msgs/Pose2D','geometry_msgs/Twist','geometry_msgs/PolygonStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,vehicle_id,last_terminated_action,robot_status,battery_state,current_position,current_velocity,footprint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_id is None:
        self.vehicle_id = mars_common_msgs.msg.Id()
      if self.last_terminated_action is None:
        self.last_terminated_action = sim_msgs.msg.AssignmentId()
      if self.robot_status is None:
        self.robot_status = industrial_msgs.msg.RobotStatus()
      if self.battery_state is None:
        self.battery_state = sensor_msgs.msg.BatteryState()
      if self.current_position is None:
        self.current_position = geometry_msgs.msg.Pose2D()
      if self.current_velocity is None:
        self.current_velocity = geometry_msgs.msg.Twist()
      if self.footprint is None:
        self.footprint = geometry_msgs.msg.PolygonStamped()
    else:
      self.header = std_msgs.msg.Header()
      self.vehicle_id = mars_common_msgs.msg.Id()
      self.last_terminated_action = sim_msgs.msg.AssignmentId()
      self.robot_status = industrial_msgs.msg.RobotStatus()
      self.battery_state = sensor_msgs.msg.BatteryState()
      self.current_position = geometry_msgs.msg.Pose2D()
      self.current_velocity = geometry_msgs.msg.Twist()
      self.footprint = geometry_msgs.msg.PolygonStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.vehicle_id.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.vehicle_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.last_terminated_action.task_id.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.last_terminated_action.task_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.last_terminated_action.action_id.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.last_terminated_action.action_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.last_terminated_action.motion_id.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.last_terminated_action.motion_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_status.header.seq, _x.robot_status.header.stamp.secs, _x.robot_status.header.stamp.nsecs))
      _x = self.robot_status.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6bi3I().pack(_x.robot_status.mode.val, _x.robot_status.e_stopped.val, _x.robot_status.drives_powered.val, _x.robot_status.motion_possible.val, _x.robot_status.in_motion.val, _x.robot_status.in_error.val, _x.robot_status.error_code, _x.battery_state.header.seq, _x.battery_state.header.stamp.secs, _x.battery_state.header.stamp.nsecs))
      _x = self.battery_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6f4B().pack(_x.battery_state.voltage, _x.battery_state.current, _x.battery_state.charge, _x.battery_state.capacity, _x.battery_state.design_capacity, _x.battery_state.percentage, _x.battery_state.power_supply_status, _x.battery_state.power_supply_health, _x.battery_state.power_supply_technology, _x.battery_state.present))
      length = len(self.battery_state.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.battery_state.cell_voltage))
      _x = self.battery_state.location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.battery_state.serial_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9d3I().pack(_x.current_position.x, _x.current_position.y, _x.current_position.theta, _x.current_velocity.linear.x, _x.current_velocity.linear.y, _x.current_velocity.linear.z, _x.current_velocity.angular.x, _x.current_velocity.angular.y, _x.current_velocity.angular.z, _x.footprint.header.seq, _x.footprint.header.stamp.secs, _x.footprint.header.stamp.nsecs))
      _x = self.footprint.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.footprint.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.footprint.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_id is None:
        self.vehicle_id = mars_common_msgs.msg.Id()
      if self.last_terminated_action is None:
        self.last_terminated_action = sim_msgs.msg.AssignmentId()
      if self.robot_status is None:
        self.robot_status = industrial_msgs.msg.RobotStatus()
      if self.battery_state is None:
        self.battery_state = sensor_msgs.msg.BatteryState()
      if self.current_position is None:
        self.current_position = geometry_msgs.msg.Pose2D()
      if self.current_velocity is None:
        self.current_velocity = geometry_msgs.msg.Twist()
      if self.footprint is None:
        self.footprint = geometry_msgs.msg.PolygonStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 16
      self.vehicle_id.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_id.description = str[start:end].decode('utf-8')
      else:
        self.vehicle_id.description = str[start:end]
      start = end
      end += 16
      self.last_terminated_action.task_id.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_terminated_action.task_id.description = str[start:end].decode('utf-8')
      else:
        self.last_terminated_action.task_id.description = str[start:end]
      start = end
      end += 16
      self.last_terminated_action.action_id.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_terminated_action.action_id.description = str[start:end].decode('utf-8')
      else:
        self.last_terminated_action.action_id.description = str[start:end]
      start = end
      end += 16
      self.last_terminated_action.motion_id.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_terminated_action.motion_id.description = str[start:end].decode('utf-8')
      else:
        self.last_terminated_action.motion_id.description = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.robot_status.header.seq, _x.robot_status.header.stamp.secs, _x.robot_status.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_status.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.robot_status.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.robot_status.mode.val, _x.robot_status.e_stopped.val, _x.robot_status.drives_powered.val, _x.robot_status.motion_possible.val, _x.robot_status.in_motion.val, _x.robot_status.in_error.val, _x.robot_status.error_code, _x.battery_state.header.seq, _x.battery_state.header.stamp.secs, _x.battery_state.header.stamp.nsecs,) = _get_struct_6bi3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.battery_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.battery_state.voltage, _x.battery_state.current, _x.battery_state.charge, _x.battery_state.capacity, _x.battery_state.design_capacity, _x.battery_state.percentage, _x.battery_state.power_supply_status, _x.battery_state.power_supply_health, _x.battery_state.power_supply_technology, _x.battery_state.present,) = _get_struct_6f4B().unpack(str[start:end])
      self.battery_state.present = bool(self.battery_state.present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.battery_state.cell_voltage = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_state.location = str[start:end].decode('utf-8')
      else:
        self.battery_state.location = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_state.serial_number = str[start:end].decode('utf-8')
      else:
        self.battery_state.serial_number = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.current_position.x, _x.current_position.y, _x.current_position.theta, _x.current_velocity.linear.x, _x.current_velocity.linear.y, _x.current_velocity.linear.z, _x.current_velocity.angular.x, _x.current_velocity.angular.y, _x.current_velocity.angular.z, _x.footprint.header.seq, _x.footprint.header.stamp.secs, _x.footprint.header.stamp.nsecs,) = _get_struct_9d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.footprint.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.footprint.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footprint.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.footprint.polygon.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.vehicle_id.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.vehicle_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.last_terminated_action.task_id.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.last_terminated_action.task_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.last_terminated_action.action_id.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.last_terminated_action.action_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.last_terminated_action.motion_id.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.last_terminated_action.motion_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_status.header.seq, _x.robot_status.header.stamp.secs, _x.robot_status.header.stamp.nsecs))
      _x = self.robot_status.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6bi3I().pack(_x.robot_status.mode.val, _x.robot_status.e_stopped.val, _x.robot_status.drives_powered.val, _x.robot_status.motion_possible.val, _x.robot_status.in_motion.val, _x.robot_status.in_error.val, _x.robot_status.error_code, _x.battery_state.header.seq, _x.battery_state.header.stamp.secs, _x.battery_state.header.stamp.nsecs))
      _x = self.battery_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6f4B().pack(_x.battery_state.voltage, _x.battery_state.current, _x.battery_state.charge, _x.battery_state.capacity, _x.battery_state.design_capacity, _x.battery_state.percentage, _x.battery_state.power_supply_status, _x.battery_state.power_supply_health, _x.battery_state.power_supply_technology, _x.battery_state.present))
      length = len(self.battery_state.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.battery_state.cell_voltage.tostring())
      _x = self.battery_state.location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.battery_state.serial_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9d3I().pack(_x.current_position.x, _x.current_position.y, _x.current_position.theta, _x.current_velocity.linear.x, _x.current_velocity.linear.y, _x.current_velocity.linear.z, _x.current_velocity.angular.x, _x.current_velocity.angular.y, _x.current_velocity.angular.z, _x.footprint.header.seq, _x.footprint.header.stamp.secs, _x.footprint.header.stamp.nsecs))
      _x = self.footprint.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.footprint.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.footprint.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_id is None:
        self.vehicle_id = mars_common_msgs.msg.Id()
      if self.last_terminated_action is None:
        self.last_terminated_action = sim_msgs.msg.AssignmentId()
      if self.robot_status is None:
        self.robot_status = industrial_msgs.msg.RobotStatus()
      if self.battery_state is None:
        self.battery_state = sensor_msgs.msg.BatteryState()
      if self.current_position is None:
        self.current_position = geometry_msgs.msg.Pose2D()
      if self.current_velocity is None:
        self.current_velocity = geometry_msgs.msg.Twist()
      if self.footprint is None:
        self.footprint = geometry_msgs.msg.PolygonStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 16
      self.vehicle_id.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_id.description = str[start:end].decode('utf-8')
      else:
        self.vehicle_id.description = str[start:end]
      start = end
      end += 16
      self.last_terminated_action.task_id.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_terminated_action.task_id.description = str[start:end].decode('utf-8')
      else:
        self.last_terminated_action.task_id.description = str[start:end]
      start = end
      end += 16
      self.last_terminated_action.action_id.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_terminated_action.action_id.description = str[start:end].decode('utf-8')
      else:
        self.last_terminated_action.action_id.description = str[start:end]
      start = end
      end += 16
      self.last_terminated_action.motion_id.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_terminated_action.motion_id.description = str[start:end].decode('utf-8')
      else:
        self.last_terminated_action.motion_id.description = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.robot_status.header.seq, _x.robot_status.header.stamp.secs, _x.robot_status.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_status.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.robot_status.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.robot_status.mode.val, _x.robot_status.e_stopped.val, _x.robot_status.drives_powered.val, _x.robot_status.motion_possible.val, _x.robot_status.in_motion.val, _x.robot_status.in_error.val, _x.robot_status.error_code, _x.battery_state.header.seq, _x.battery_state.header.stamp.secs, _x.battery_state.header.stamp.nsecs,) = _get_struct_6bi3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.battery_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.battery_state.voltage, _x.battery_state.current, _x.battery_state.charge, _x.battery_state.capacity, _x.battery_state.design_capacity, _x.battery_state.percentage, _x.battery_state.power_supply_status, _x.battery_state.power_supply_health, _x.battery_state.power_supply_technology, _x.battery_state.present,) = _get_struct_6f4B().unpack(str[start:end])
      self.battery_state.present = bool(self.battery_state.present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.battery_state.cell_voltage = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_state.location = str[start:end].decode('utf-8')
      else:
        self.battery_state.location = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_state.serial_number = str[start:end].decode('utf-8')
      else:
        self.battery_state.serial_number = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.current_position.x, _x.current_position.y, _x.current_position.theta, _x.current_velocity.linear.x, _x.current_velocity.linear.y, _x.current_velocity.linear.z, _x.current_velocity.angular.x, _x.current_velocity.angular.y, _x.current_velocity.angular.z, _x.footprint.header.seq, _x.footprint.header.stamp.secs, _x.footprint.header.stamp.nsecs,) = _get_struct_9d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.footprint.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.footprint.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footprint.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.footprint.polygon.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f4B = None
def _get_struct_6f4B():
    global _struct_6f4B
    if _struct_6f4B is None:
        _struct_6f4B = struct.Struct("<6f4B")
    return _struct_6f4B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6bi3I = None
def _get_struct_6bi3I():
    global _struct_6bi3I
    if _struct_6bi3I is None:
        _struct_6bi3I = struct.Struct("<6bi3I")
    return _struct_6bi3I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_9d3I = None
def _get_struct_9d3I():
    global _struct_9d3I
    if _struct_9d3I is None:
        _struct_9d3I = struct.Struct("<9d3I")
    return _struct_9d3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
