# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcr_driver/BitStatusRos.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BitStatusRos(genpy.Message):
  _md5sum = "2253552a57ac1bef3af9f6d07aaff730"
  _type = "lcr_driver/BitStatusRos"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool st_Ros_BumpFront
bool st_Ros_BumpRear
bool st_Ros_FallFront
bool st_Ros_FallRear
bool st_Ros_Emergenza
bool st_Ros_ErrInt1
bool st_Ros_ErrInt2
bool st_Ros_Mot_DX_Fail
bool st_Ros_Mot_SX_Fail
bool st_Ros_Recharge_Found
bool st_Ros_Recharge_On
bool st_Ros_Recharge_Ok
bool st_Ros_BatteryFail
bool NofBitStatusRos"""
  __slots__ = ['st_Ros_BumpFront','st_Ros_BumpRear','st_Ros_FallFront','st_Ros_FallRear','st_Ros_Emergenza','st_Ros_ErrInt1','st_Ros_ErrInt2','st_Ros_Mot_DX_Fail','st_Ros_Mot_SX_Fail','st_Ros_Recharge_Found','st_Ros_Recharge_On','st_Ros_Recharge_Ok','st_Ros_BatteryFail','NofBitStatusRos']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       st_Ros_BumpFront,st_Ros_BumpRear,st_Ros_FallFront,st_Ros_FallRear,st_Ros_Emergenza,st_Ros_ErrInt1,st_Ros_ErrInt2,st_Ros_Mot_DX_Fail,st_Ros_Mot_SX_Fail,st_Ros_Recharge_Found,st_Ros_Recharge_On,st_Ros_Recharge_Ok,st_Ros_BatteryFail,NofBitStatusRos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BitStatusRos, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.st_Ros_BumpFront is None:
        self.st_Ros_BumpFront = False
      if self.st_Ros_BumpRear is None:
        self.st_Ros_BumpRear = False
      if self.st_Ros_FallFront is None:
        self.st_Ros_FallFront = False
      if self.st_Ros_FallRear is None:
        self.st_Ros_FallRear = False
      if self.st_Ros_Emergenza is None:
        self.st_Ros_Emergenza = False
      if self.st_Ros_ErrInt1 is None:
        self.st_Ros_ErrInt1 = False
      if self.st_Ros_ErrInt2 is None:
        self.st_Ros_ErrInt2 = False
      if self.st_Ros_Mot_DX_Fail is None:
        self.st_Ros_Mot_DX_Fail = False
      if self.st_Ros_Mot_SX_Fail is None:
        self.st_Ros_Mot_SX_Fail = False
      if self.st_Ros_Recharge_Found is None:
        self.st_Ros_Recharge_Found = False
      if self.st_Ros_Recharge_On is None:
        self.st_Ros_Recharge_On = False
      if self.st_Ros_Recharge_Ok is None:
        self.st_Ros_Recharge_Ok = False
      if self.st_Ros_BatteryFail is None:
        self.st_Ros_BatteryFail = False
      if self.NofBitStatusRos is None:
        self.NofBitStatusRos = False
    else:
      self.st_Ros_BumpFront = False
      self.st_Ros_BumpRear = False
      self.st_Ros_FallFront = False
      self.st_Ros_FallRear = False
      self.st_Ros_Emergenza = False
      self.st_Ros_ErrInt1 = False
      self.st_Ros_ErrInt2 = False
      self.st_Ros_Mot_DX_Fail = False
      self.st_Ros_Mot_SX_Fail = False
      self.st_Ros_Recharge_Found = False
      self.st_Ros_Recharge_On = False
      self.st_Ros_Recharge_Ok = False
      self.st_Ros_BatteryFail = False
      self.NofBitStatusRos = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14B().pack(_x.st_Ros_BumpFront, _x.st_Ros_BumpRear, _x.st_Ros_FallFront, _x.st_Ros_FallRear, _x.st_Ros_Emergenza, _x.st_Ros_ErrInt1, _x.st_Ros_ErrInt2, _x.st_Ros_Mot_DX_Fail, _x.st_Ros_Mot_SX_Fail, _x.st_Ros_Recharge_Found, _x.st_Ros_Recharge_On, _x.st_Ros_Recharge_Ok, _x.st_Ros_BatteryFail, _x.NofBitStatusRos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.st_Ros_BumpFront, _x.st_Ros_BumpRear, _x.st_Ros_FallFront, _x.st_Ros_FallRear, _x.st_Ros_Emergenza, _x.st_Ros_ErrInt1, _x.st_Ros_ErrInt2, _x.st_Ros_Mot_DX_Fail, _x.st_Ros_Mot_SX_Fail, _x.st_Ros_Recharge_Found, _x.st_Ros_Recharge_On, _x.st_Ros_Recharge_Ok, _x.st_Ros_BatteryFail, _x.NofBitStatusRos,) = _get_struct_14B().unpack(str[start:end])
      self.st_Ros_BumpFront = bool(self.st_Ros_BumpFront)
      self.st_Ros_BumpRear = bool(self.st_Ros_BumpRear)
      self.st_Ros_FallFront = bool(self.st_Ros_FallFront)
      self.st_Ros_FallRear = bool(self.st_Ros_FallRear)
      self.st_Ros_Emergenza = bool(self.st_Ros_Emergenza)
      self.st_Ros_ErrInt1 = bool(self.st_Ros_ErrInt1)
      self.st_Ros_ErrInt2 = bool(self.st_Ros_ErrInt2)
      self.st_Ros_Mot_DX_Fail = bool(self.st_Ros_Mot_DX_Fail)
      self.st_Ros_Mot_SX_Fail = bool(self.st_Ros_Mot_SX_Fail)
      self.st_Ros_Recharge_Found = bool(self.st_Ros_Recharge_Found)
      self.st_Ros_Recharge_On = bool(self.st_Ros_Recharge_On)
      self.st_Ros_Recharge_Ok = bool(self.st_Ros_Recharge_Ok)
      self.st_Ros_BatteryFail = bool(self.st_Ros_BatteryFail)
      self.NofBitStatusRos = bool(self.NofBitStatusRos)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14B().pack(_x.st_Ros_BumpFront, _x.st_Ros_BumpRear, _x.st_Ros_FallFront, _x.st_Ros_FallRear, _x.st_Ros_Emergenza, _x.st_Ros_ErrInt1, _x.st_Ros_ErrInt2, _x.st_Ros_Mot_DX_Fail, _x.st_Ros_Mot_SX_Fail, _x.st_Ros_Recharge_Found, _x.st_Ros_Recharge_On, _x.st_Ros_Recharge_Ok, _x.st_Ros_BatteryFail, _x.NofBitStatusRos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.st_Ros_BumpFront, _x.st_Ros_BumpRear, _x.st_Ros_FallFront, _x.st_Ros_FallRear, _x.st_Ros_Emergenza, _x.st_Ros_ErrInt1, _x.st_Ros_ErrInt2, _x.st_Ros_Mot_DX_Fail, _x.st_Ros_Mot_SX_Fail, _x.st_Ros_Recharge_Found, _x.st_Ros_Recharge_On, _x.st_Ros_Recharge_Ok, _x.st_Ros_BatteryFail, _x.NofBitStatusRos,) = _get_struct_14B().unpack(str[start:end])
      self.st_Ros_BumpFront = bool(self.st_Ros_BumpFront)
      self.st_Ros_BumpRear = bool(self.st_Ros_BumpRear)
      self.st_Ros_FallFront = bool(self.st_Ros_FallFront)
      self.st_Ros_FallRear = bool(self.st_Ros_FallRear)
      self.st_Ros_Emergenza = bool(self.st_Ros_Emergenza)
      self.st_Ros_ErrInt1 = bool(self.st_Ros_ErrInt1)
      self.st_Ros_ErrInt2 = bool(self.st_Ros_ErrInt2)
      self.st_Ros_Mot_DX_Fail = bool(self.st_Ros_Mot_DX_Fail)
      self.st_Ros_Mot_SX_Fail = bool(self.st_Ros_Mot_SX_Fail)
      self.st_Ros_Recharge_Found = bool(self.st_Ros_Recharge_Found)
      self.st_Ros_Recharge_On = bool(self.st_Ros_Recharge_On)
      self.st_Ros_Recharge_Ok = bool(self.st_Ros_Recharge_Ok)
      self.st_Ros_BatteryFail = bool(self.st_Ros_BatteryFail)
      self.NofBitStatusRos = bool(self.NofBitStatusRos)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14B = None
def _get_struct_14B():
    global _struct_14B
    if _struct_14B is None:
        _struct_14B = struct.Struct("<14B")
    return _struct_14B
