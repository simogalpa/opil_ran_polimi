# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from opil_v2/RobotDescription.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import opil_v2.msg
import std_msgs.msg

class RobotDescription(genpy.Message):
  _md5sum = "820816697a26fe0826984b872430e14c"
  _type = "opil_v2/RobotDescription"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
Id robot_id
RobotDescriptionAGV agv_msg

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: opil_v2/Id
# Message for defining IDs
# numeric ID
uint32 id

# optional description of the id
# description can be:
#   - a name
#   - what is descriped by the id
#   - etc.

string description


================================================================================
MSG: opil_v2/RobotDescriptionAGV
Header header
Id vehicle_id
float32 left_size
float32 right_size
float32 front_size
float32 rear_size
float32 min_height
float32 max_height
float32 payload
float32 max_pos_x_vel
float32 max_neg_x_vel
float32 max_pos_x_acc
float32 max_neg_x_acc
float32 max_pos_y_vel
float32 max_neg_y_vel
float32 max_pos_y_acc
float32 max_neg_y_acc
float32 max_pos_ang_vel
float32 max_neg_ang_vel
float32 velocity_control_sensitivity
float32 min_turning_radius
float32 batt_capacity
float32 batt_max_voltage
string vehicle_type
string vendor 
RobotAction[] action_capability

================================================================================
MSG: opil_v2/RobotAction
# definition of all the possible actionsmars_agent_physical_robot_msgs
uint8 CATEGORY_UNDEFINED = 0
uint8 CATEGORY_NONE = 5
uint8 CATEGORY_LOAD = 10
uint8 CATEGORY_MANUAL_LOAD_START = 11
uint8 CATEGORY_MANUAL_LOAD_DONE = 12
uint8 CATEGORY_UNLOAD = 20
uint8 CATEGORY_MANUAL_UNLOAD_START = 21
uint8 CATEGORY_MANUAL_UNLOAD_DONE = 22
uint8 CATEGORY_START_CHARGING = 30
uint8 CATEGORY_STOP_CHARGING = 31
# ...


# Category of the action which has to be performed
uint8 category
# Defines the robot specific action which has to be performed. 
# The specific actions must be defined by manufacturer. 
uint8 action
Tuple[] attributes
# Optional description of the action. E.g.: unload left
string description


================================================================================
MSG: opil_v2/Tuple
string type
string name
string value

"""
  __slots__ = ['header','robot_id','agv_msg']
  _slot_types = ['std_msgs/Header','opil_v2/Id','opil_v2/RobotDescriptionAGV']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,robot_id,agv_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotDescription, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot_id is None:
        self.robot_id = opil_v2.msg.Id()
      if self.agv_msg is None:
        self.agv_msg = opil_v2.msg.RobotDescriptionAGV()
    else:
      self.header = std_msgs.msg.Header()
      self.robot_id = opil_v2.msg.Id()
      self.agv_msg = opil_v2.msg.RobotDescriptionAGV()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.robot_id.id))
      _x = self.robot_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.agv_msg.header.seq, _x.agv_msg.header.stamp.secs, _x.agv_msg.header.stamp.nsecs))
      _x = self.agv_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.agv_msg.vehicle_id.id))
      _x = self.agv_msg.vehicle_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_21f().pack(_x.agv_msg.left_size, _x.agv_msg.right_size, _x.agv_msg.front_size, _x.agv_msg.rear_size, _x.agv_msg.min_height, _x.agv_msg.max_height, _x.agv_msg.payload, _x.agv_msg.max_pos_x_vel, _x.agv_msg.max_neg_x_vel, _x.agv_msg.max_pos_x_acc, _x.agv_msg.max_neg_x_acc, _x.agv_msg.max_pos_y_vel, _x.agv_msg.max_neg_y_vel, _x.agv_msg.max_pos_y_acc, _x.agv_msg.max_neg_y_acc, _x.agv_msg.max_pos_ang_vel, _x.agv_msg.max_neg_ang_vel, _x.agv_msg.velocity_control_sensitivity, _x.agv_msg.min_turning_radius, _x.agv_msg.batt_capacity, _x.agv_msg.batt_max_voltage))
      _x = self.agv_msg.vehicle_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agv_msg.vendor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.agv_msg.action_capability)
      buff.write(_struct_I.pack(length))
      for val1 in self.agv_msg.action_capability:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.category, _x.action))
        length = len(val1.attributes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.attributes:
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot_id is None:
        self.robot_id = opil_v2.msg.Id()
      if self.agv_msg is None:
        self.agv_msg = opil_v2.msg.RobotDescriptionAGV()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.robot_id.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id.description = str[start:end].decode('utf-8')
      else:
        self.robot_id.description = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.agv_msg.header.seq, _x.agv_msg.header.stamp.secs, _x.agv_msg.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.agv_msg.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.agv_msg.vehicle_id.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_msg.vehicle_id.description = str[start:end].decode('utf-8')
      else:
        self.agv_msg.vehicle_id.description = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.agv_msg.left_size, _x.agv_msg.right_size, _x.agv_msg.front_size, _x.agv_msg.rear_size, _x.agv_msg.min_height, _x.agv_msg.max_height, _x.agv_msg.payload, _x.agv_msg.max_pos_x_vel, _x.agv_msg.max_neg_x_vel, _x.agv_msg.max_pos_x_acc, _x.agv_msg.max_neg_x_acc, _x.agv_msg.max_pos_y_vel, _x.agv_msg.max_neg_y_vel, _x.agv_msg.max_pos_y_acc, _x.agv_msg.max_neg_y_acc, _x.agv_msg.max_pos_ang_vel, _x.agv_msg.max_neg_ang_vel, _x.agv_msg.velocity_control_sensitivity, _x.agv_msg.min_turning_radius, _x.agv_msg.batt_capacity, _x.agv_msg.batt_max_voltage,) = _get_struct_21f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_msg.vehicle_type = str[start:end].decode('utf-8')
      else:
        self.agv_msg.vehicle_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_msg.vendor = str[start:end].decode('utf-8')
      else:
        self.agv_msg.vendor = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.agv_msg.action_capability = []
      for i in range(0, length):
        val1 = opil_v2.msg.RobotAction()
        _x = val1
        start = end
        end += 2
        (_x.category, _x.action,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.attributes = []
        for i in range(0, length):
          val2 = opil_v2.msg.Tuple()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8')
          else:
            val2.type = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.attributes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.description = str[start:end].decode('utf-8')
        else:
          val1.description = str[start:end]
        self.agv_msg.action_capability.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.robot_id.id))
      _x = self.robot_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.agv_msg.header.seq, _x.agv_msg.header.stamp.secs, _x.agv_msg.header.stamp.nsecs))
      _x = self.agv_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.agv_msg.vehicle_id.id))
      _x = self.agv_msg.vehicle_id.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_21f().pack(_x.agv_msg.left_size, _x.agv_msg.right_size, _x.agv_msg.front_size, _x.agv_msg.rear_size, _x.agv_msg.min_height, _x.agv_msg.max_height, _x.agv_msg.payload, _x.agv_msg.max_pos_x_vel, _x.agv_msg.max_neg_x_vel, _x.agv_msg.max_pos_x_acc, _x.agv_msg.max_neg_x_acc, _x.agv_msg.max_pos_y_vel, _x.agv_msg.max_neg_y_vel, _x.agv_msg.max_pos_y_acc, _x.agv_msg.max_neg_y_acc, _x.agv_msg.max_pos_ang_vel, _x.agv_msg.max_neg_ang_vel, _x.agv_msg.velocity_control_sensitivity, _x.agv_msg.min_turning_radius, _x.agv_msg.batt_capacity, _x.agv_msg.batt_max_voltage))
      _x = self.agv_msg.vehicle_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agv_msg.vendor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.agv_msg.action_capability)
      buff.write(_struct_I.pack(length))
      for val1 in self.agv_msg.action_capability:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.category, _x.action))
        length = len(val1.attributes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.attributes:
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot_id is None:
        self.robot_id = opil_v2.msg.Id()
      if self.agv_msg is None:
        self.agv_msg = opil_v2.msg.RobotDescriptionAGV()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.robot_id.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id.description = str[start:end].decode('utf-8')
      else:
        self.robot_id.description = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.agv_msg.header.seq, _x.agv_msg.header.stamp.secs, _x.agv_msg.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.agv_msg.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.agv_msg.vehicle_id.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_msg.vehicle_id.description = str[start:end].decode('utf-8')
      else:
        self.agv_msg.vehicle_id.description = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.agv_msg.left_size, _x.agv_msg.right_size, _x.agv_msg.front_size, _x.agv_msg.rear_size, _x.agv_msg.min_height, _x.agv_msg.max_height, _x.agv_msg.payload, _x.agv_msg.max_pos_x_vel, _x.agv_msg.max_neg_x_vel, _x.agv_msg.max_pos_x_acc, _x.agv_msg.max_neg_x_acc, _x.agv_msg.max_pos_y_vel, _x.agv_msg.max_neg_y_vel, _x.agv_msg.max_pos_y_acc, _x.agv_msg.max_neg_y_acc, _x.agv_msg.max_pos_ang_vel, _x.agv_msg.max_neg_ang_vel, _x.agv_msg.velocity_control_sensitivity, _x.agv_msg.min_turning_radius, _x.agv_msg.batt_capacity, _x.agv_msg.batt_max_voltage,) = _get_struct_21f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_msg.vehicle_type = str[start:end].decode('utf-8')
      else:
        self.agv_msg.vehicle_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_msg.vendor = str[start:end].decode('utf-8')
      else:
        self.agv_msg.vendor = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.agv_msg.action_capability = []
      for i in range(0, length):
        val1 = opil_v2.msg.RobotAction()
        _x = val1
        start = end
        end += 2
        (_x.category, _x.action,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.attributes = []
        for i in range(0, length):
          val2 = opil_v2.msg.Tuple()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8')
          else:
            val2.type = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.attributes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.description = str[start:end].decode('utf-8')
        else:
          val1.description = str[start:end]
        self.agv_msg.action_capability.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_21f = None
def _get_struct_21f():
    global _struct_21f
    if _struct_21f is None:
        _struct_21f = struct.Struct("<21f")
    return _struct_21f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
