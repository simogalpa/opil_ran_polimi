// Generated by gencpp from file opil_v2/RobotAction.msg
// DO NOT EDIT!


#ifndef OPIL_V2_MESSAGE_ROBOTACTION_H
#define OPIL_V2_MESSAGE_ROBOTACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <opil_v2/Tuple.h>

namespace opil_v2
{
template <class ContainerAllocator>
struct RobotAction_
{
  typedef RobotAction_<ContainerAllocator> Type;

  RobotAction_()
    : category(0)
    , action(0)
    , attributes()
    , description()  {
    }
  RobotAction_(const ContainerAllocator& _alloc)
    : category(0)
    , action(0)
    , attributes(_alloc)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _category_type;
  _category_type category;

   typedef uint8_t _action_type;
  _action_type action;

   typedef std::vector< ::opil_v2::Tuple_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::opil_v2::Tuple_<ContainerAllocator> >::other >  _attributes_type;
  _attributes_type attributes;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;



  enum {
    CATEGORY_UNDEFINED = 0u,
    CATEGORY_NONE = 5u,
    CATEGORY_LOAD = 10u,
    CATEGORY_MANUAL_LOAD_START = 11u,
    CATEGORY_MANUAL_LOAD_DONE = 12u,
    CATEGORY_UNLOAD = 20u,
    CATEGORY_MANUAL_UNLOAD_START = 21u,
    CATEGORY_MANUAL_UNLOAD_DONE = 22u,
    CATEGORY_START_CHARGING = 30u,
    CATEGORY_STOP_CHARGING = 31u,
  };


  typedef boost::shared_ptr< ::opil_v2::RobotAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opil_v2::RobotAction_<ContainerAllocator> const> ConstPtr;

}; // struct RobotAction_

typedef ::opil_v2::RobotAction_<std::allocator<void> > RobotAction;

typedef boost::shared_ptr< ::opil_v2::RobotAction > RobotActionPtr;
typedef boost::shared_ptr< ::opil_v2::RobotAction const> RobotActionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opil_v2::RobotAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opil_v2::RobotAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opil_v2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'opil_v2': ['/home/lcr/catkin_ws/src/OLD_opil_v2/msg'], 'industrial_msgs': ['/opt/ros/kinetic/share/industrial_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opil_v2::RobotAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opil_v2::RobotAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opil_v2::RobotAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opil_v2::RobotAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opil_v2::RobotAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opil_v2::RobotAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opil_v2::RobotAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d6573f0dd507d2eb40dd1e6516c59f5";
  }

  static const char* value(const ::opil_v2::RobotAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d6573f0dd507d2eULL;
  static const uint64_t static_value2 = 0xb40dd1e6516c59f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::opil_v2::RobotAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opil_v2/RobotAction";
  }

  static const char* value(const ::opil_v2::RobotAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opil_v2::RobotAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# definition of all the possible actionsmars_agent_physical_robot_msgs\n\
uint8 CATEGORY_UNDEFINED = 0\n\
uint8 CATEGORY_NONE = 5\n\
uint8 CATEGORY_LOAD = 10\n\
uint8 CATEGORY_MANUAL_LOAD_START = 11\n\
uint8 CATEGORY_MANUAL_LOAD_DONE = 12\n\
uint8 CATEGORY_UNLOAD = 20\n\
uint8 CATEGORY_MANUAL_UNLOAD_START = 21\n\
uint8 CATEGORY_MANUAL_UNLOAD_DONE = 22\n\
uint8 CATEGORY_START_CHARGING = 30\n\
uint8 CATEGORY_STOP_CHARGING = 31\n\
# ...\n\
\n\
\n\
# Category of the action which has to be performed\n\
uint8 category\n\
# Defines the robot specific action which has to be performed. \n\
# The specific actions must be defined by manufacturer. \n\
uint8 action\n\
Tuple[] attributes\n\
# Optional description of the action. E.g.: unload left\n\
string description\n\
\n\
\n\
================================================================================\n\
MSG: opil_v2/Tuple\n\
string type\n\
string name\n\
string value\n\
\n\
";
  }

  static const char* value(const ::opil_v2::RobotAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opil_v2::RobotAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.category);
      stream.next(m.action);
      stream.next(m.attributes);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opil_v2::RobotAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opil_v2::RobotAction_<ContainerAllocator>& v)
  {
    s << indent << "category: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.category);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "attributes[]" << std::endl;
    for (size_t i = 0; i < v.attributes.size(); ++i)
    {
      s << indent << "  attributes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::opil_v2::Tuple_<ContainerAllocator> >::stream(s, indent + "    ", v.attributes[i]);
    }
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPIL_V2_MESSAGE_ROBOTACTION_H
