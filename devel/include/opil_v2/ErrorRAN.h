// Generated by gencpp from file opil_v2/ErrorRAN.msg
// DO NOT EDIT!


#ifndef OPIL_V2_MESSAGE_ERRORRAN_H
#define OPIL_V2_MESSAGE_ERRORRAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <opil_v2/Id.h>
#include <opil_v2/ErrorAGV.h>

namespace opil_v2
{
template <class ContainerAllocator>
struct ErrorRAN_
{
  typedef ErrorRAN_<ContainerAllocator> Type;

  ErrorRAN_()
    : header()
    , robot_id()
    , error_RAN(0)
    , description()
    , agv_error()  {
    }
  ErrorRAN_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot_id(_alloc)
    , error_RAN(0)
    , description(_alloc)
    , agv_error(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::opil_v2::Id_<ContainerAllocator>  _robot_id_type;
  _robot_id_type robot_id;

   typedef uint8_t _error_RAN_type;
  _error_RAN_type error_RAN;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef  ::opil_v2::ErrorAGV_<ContainerAllocator>  _agv_error_type;
  _agv_error_type agv_error;





  typedef boost::shared_ptr< ::opil_v2::ErrorRAN_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opil_v2::ErrorRAN_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorRAN_

typedef ::opil_v2::ErrorRAN_<std::allocator<void> > ErrorRAN;

typedef boost::shared_ptr< ::opil_v2::ErrorRAN > ErrorRANPtr;
typedef boost::shared_ptr< ::opil_v2::ErrorRAN const> ErrorRANConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opil_v2::ErrorRAN_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opil_v2::ErrorRAN_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opil_v2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'opil_v2': ['/home/lcr/catkin_ws/src/OLD_opil_v2/msg'], 'industrial_msgs': ['/opt/ros/kinetic/share/industrial_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opil_v2::ErrorRAN_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opil_v2::ErrorRAN_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opil_v2::ErrorRAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opil_v2::ErrorRAN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opil_v2::ErrorRAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opil_v2::ErrorRAN_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opil_v2::ErrorRAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64923603d670371b84825165fc533575";
  }

  static const char* value(const ::opil_v2::ErrorRAN_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64923603d670371bULL;
  static const uint64_t static_value2 = 0x84825165fc533575ULL;
};

template<class ContainerAllocator>
struct DataType< ::opil_v2::ErrorRAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opil_v2/ErrorRAN";
  }

  static const char* value(const ::opil_v2::ErrorRAN_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opil_v2::ErrorRAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Error message from the RAN\n\
std_msgs/Header header\n\
Id robot_id\n\
uint8 error_RAN\n\
string description\n\
ErrorAGV agv_error\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: opil_v2/Id\n\
# Message for defining IDs\n\
# numeric ID\n\
uint32 id\n\
\n\
# optional description of the id\n\
# description can be:\n\
#   - a name\n\
#   - what is descriped by the id\n\
#   - etc.\n\
\n\
string description\n\
\n\
\n\
================================================================================\n\
MSG: opil_v2/ErrorAGV\n\
# Error message from the AGV\n\
std_msgs/Header header\n\
Id vehicle_id\n\
uint8 error_AGV\n\
string description\n\
";
  }

  static const char* value(const ::opil_v2::ErrorRAN_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opil_v2::ErrorRAN_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot_id);
      stream.next(m.error_RAN);
      stream.next(m.description);
      stream.next(m.agv_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorRAN_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opil_v2::ErrorRAN_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opil_v2::ErrorRAN_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot_id: ";
    s << std::endl;
    Printer< ::opil_v2::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_id);
    s << indent << "error_RAN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_RAN);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "agv_error: ";
    s << std::endl;
    Printer< ::opil_v2::ErrorAGV_<ContainerAllocator> >::stream(s, indent + "  ", v.agv_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPIL_V2_MESSAGE_ERRORRAN_H
