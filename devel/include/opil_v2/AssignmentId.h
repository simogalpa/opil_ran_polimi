// Generated by gencpp from file opil_v2/AssignmentId.msg
// DO NOT EDIT!


#ifndef OPIL_V2_MESSAGE_ASSIGNMENTID_H
#define OPIL_V2_MESSAGE_ASSIGNMENTID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace opil_v2
{
template <class ContainerAllocator>
struct AssignmentId_
{
  typedef AssignmentId_<ContainerAllocator> Type;

  AssignmentId_()
    : task_id(0)
    , action_id(0)
    , motion_id(0)  {
    }
  AssignmentId_(const ContainerAllocator& _alloc)
    : task_id(0)
    , action_id(0)
    , motion_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _task_id_type;
  _task_id_type task_id;

   typedef uint32_t _action_id_type;
  _action_id_type action_id;

   typedef uint32_t _motion_id_type;
  _motion_id_type motion_id;





  typedef boost::shared_ptr< ::opil_v2::AssignmentId_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opil_v2::AssignmentId_<ContainerAllocator> const> ConstPtr;

}; // struct AssignmentId_

typedef ::opil_v2::AssignmentId_<std::allocator<void> > AssignmentId;

typedef boost::shared_ptr< ::opil_v2::AssignmentId > AssignmentIdPtr;
typedef boost::shared_ptr< ::opil_v2::AssignmentId const> AssignmentIdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opil_v2::AssignmentId_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opil_v2::AssignmentId_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opil_v2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'opil_v2': ['/home/lcr/catkin_ws/src/OLD_opil_v2/msg'], 'industrial_msgs': ['/opt/ros/kinetic/share/industrial_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opil_v2::AssignmentId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opil_v2::AssignmentId_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opil_v2::AssignmentId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opil_v2::AssignmentId_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opil_v2::AssignmentId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opil_v2::AssignmentId_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opil_v2::AssignmentId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "03abaced4ef628770599470870550be6";
  }

  static const char* value(const ::opil_v2::AssignmentId_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x03abaced4ef62877ULL;
  static const uint64_t static_value2 = 0x0599470870550be6ULL;
};

template<class ContainerAllocator>
struct DataType< ::opil_v2::AssignmentId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opil_v2/AssignmentId";
  }

  static const char* value(const ::opil_v2::AssignmentId_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opil_v2::AssignmentId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for the definition of the ids of an Assignment\n\
uint32 task_id\n\
uint32 action_id\n\
uint32 motion_id\n\
";
  }

  static const char* value(const ::opil_v2::AssignmentId_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opil_v2::AssignmentId_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.action_id);
      stream.next(m.motion_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AssignmentId_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opil_v2::AssignmentId_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opil_v2::AssignmentId_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "action_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "motion_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.motion_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPIL_V2_MESSAGE_ASSIGNMENTID_H
