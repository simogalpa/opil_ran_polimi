// Generated by gencpp from file opil_v2/AssignmentStatus.msg
// DO NOT EDIT!


#ifndef OPIL_V2_MESSAGE_ASSIGNMENTSTATUS_H
#define OPIL_V2_MESSAGE_ASSIGNMENTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <opil_v2/Id.h>
#include <opil_v2/Id.h>
#include <opil_v2/Id.h>
#include <opil_v2/Id.h>
#include <opil_v2/Id.h>
#include <opil_v2/Id.h>
#include <opil_v2/AssignmentId.h>
#include <geometry_msgs/PolygonStamped.h>

namespace opil_v2
{
template <class ContainerAllocator>
struct AssignmentStatus_
{
  typedef AssignmentStatus_<ContainerAllocator> Type;

  AssignmentStatus_()
    : header()
    , robot_id()
    , current_task_id()
    , current_motion_id()
    , current_action_id()
    , last_finished_motion()
    , last_finished_action()
    , assignment_queue()
    , footprint()  {
    }
  AssignmentStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot_id(_alloc)
    , current_task_id(_alloc)
    , current_motion_id(_alloc)
    , current_action_id(_alloc)
    , last_finished_motion(_alloc)
    , last_finished_action(_alloc)
    , assignment_queue(_alloc)
    , footprint(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::opil_v2::Id_<ContainerAllocator>  _robot_id_type;
  _robot_id_type robot_id;

   typedef  ::opil_v2::Id_<ContainerAllocator>  _current_task_id_type;
  _current_task_id_type current_task_id;

   typedef  ::opil_v2::Id_<ContainerAllocator>  _current_motion_id_type;
  _current_motion_id_type current_motion_id;

   typedef  ::opil_v2::Id_<ContainerAllocator>  _current_action_id_type;
  _current_action_id_type current_action_id;

   typedef  ::opil_v2::Id_<ContainerAllocator>  _last_finished_motion_type;
  _last_finished_motion_type last_finished_motion;

   typedef  ::opil_v2::Id_<ContainerAllocator>  _last_finished_action_type;
  _last_finished_action_type last_finished_action;

   typedef std::vector< ::opil_v2::AssignmentId_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::opil_v2::AssignmentId_<ContainerAllocator> >::other >  _assignment_queue_type;
  _assignment_queue_type assignment_queue;

   typedef  ::geometry_msgs::PolygonStamped_<ContainerAllocator>  _footprint_type;
  _footprint_type footprint;





  typedef boost::shared_ptr< ::opil_v2::AssignmentStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opil_v2::AssignmentStatus_<ContainerAllocator> const> ConstPtr;

}; // struct AssignmentStatus_

typedef ::opil_v2::AssignmentStatus_<std::allocator<void> > AssignmentStatus;

typedef boost::shared_ptr< ::opil_v2::AssignmentStatus > AssignmentStatusPtr;
typedef boost::shared_ptr< ::opil_v2::AssignmentStatus const> AssignmentStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opil_v2::AssignmentStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opil_v2::AssignmentStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opil_v2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'opil_v2': ['/home/lcr/catkin_ws/src/OLD_opil_v2/msg'], 'industrial_msgs': ['/opt/ros/kinetic/share/industrial_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opil_v2::AssignmentStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opil_v2::AssignmentStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opil_v2::AssignmentStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opil_v2::AssignmentStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opil_v2::AssignmentStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opil_v2::AssignmentStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opil_v2::AssignmentStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bcb703123a6ab6a630050f9c05aea956";
  }

  static const char* value(const ::opil_v2::AssignmentStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbcb703123a6ab6a6ULL;
  static const uint64_t static_value2 = 0x30050f9c05aea956ULL;
};

template<class ContainerAllocator>
struct DataType< ::opil_v2::AssignmentStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opil_v2/AssignmentStatus";
  }

  static const char* value(const ::opil_v2::AssignmentStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opil_v2::AssignmentStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
Id robot_id\n\
Id current_task_id\n\
Id current_motion_id\n\
Id current_action_id\n\
Id last_finished_motion\n\
Id last_finished_action\n\
AssignmentId[] assignment_queue\n\
# string assignment_queue\n\
geometry_msgs/PolygonStamped footprint\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: opil_v2/Id\n\
# Message for defining IDs\n\
# numeric ID\n\
uint32 id\n\
\n\
# optional description of the id\n\
# description can be:\n\
#   - a name\n\
#   - what is descriped by the id\n\
#   - etc.\n\
\n\
string description\n\
\n\
\n\
================================================================================\n\
MSG: opil_v2/AssignmentId\n\
# Message for the definition of the ids of an Assignment\n\
uint32 task_id\n\
uint32 action_id\n\
uint32 motion_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PolygonStamped\n\
# This represents a Polygon with reference coordinate frame and timestamp\n\
Header header\n\
Polygon polygon\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::opil_v2::AssignmentStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opil_v2::AssignmentStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot_id);
      stream.next(m.current_task_id);
      stream.next(m.current_motion_id);
      stream.next(m.current_action_id);
      stream.next(m.last_finished_motion);
      stream.next(m.last_finished_action);
      stream.next(m.assignment_queue);
      stream.next(m.footprint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AssignmentStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opil_v2::AssignmentStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opil_v2::AssignmentStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot_id: ";
    s << std::endl;
    Printer< ::opil_v2::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_id);
    s << indent << "current_task_id: ";
    s << std::endl;
    Printer< ::opil_v2::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.current_task_id);
    s << indent << "current_motion_id: ";
    s << std::endl;
    Printer< ::opil_v2::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.current_motion_id);
    s << indent << "current_action_id: ";
    s << std::endl;
    Printer< ::opil_v2::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.current_action_id);
    s << indent << "last_finished_motion: ";
    s << std::endl;
    Printer< ::opil_v2::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.last_finished_motion);
    s << indent << "last_finished_action: ";
    s << std::endl;
    Printer< ::opil_v2::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.last_finished_action);
    s << indent << "assignment_queue[]" << std::endl;
    for (size_t i = 0; i < v.assignment_queue.size(); ++i)
    {
      s << indent << "  assignment_queue[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::opil_v2::AssignmentId_<ContainerAllocator> >::stream(s, indent + "    ", v.assignment_queue[i]);
    }
    s << indent << "footprint: ";
    s << std::endl;
    Printer< ::geometry_msgs::PolygonStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.footprint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPIL_V2_MESSAGE_ASSIGNMENTSTATUS_H
