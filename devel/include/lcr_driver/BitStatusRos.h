// Generated by gencpp from file lcr_driver/BitStatusRos.msg
// DO NOT EDIT!


#ifndef LCR_DRIVER_MESSAGE_BITSTATUSROS_H
#define LCR_DRIVER_MESSAGE_BITSTATUSROS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcr_driver
{
template <class ContainerAllocator>
struct BitStatusRos_
{
  typedef BitStatusRos_<ContainerAllocator> Type;

  BitStatusRos_()
    : st_Ros_BumpFront(false)
    , st_Ros_BumpRear(false)
    , st_Ros_FallFront(false)
    , st_Ros_FallRear(false)
    , st_Ros_Emergenza(false)
    , st_Ros_ErrInt1(false)
    , st_Ros_ErrInt2(false)
    , st_Ros_Mot_DX_Fail(false)
    , st_Ros_Mot_SX_Fail(false)
    , st_Ros_Recharge_Found(false)
    , st_Ros_Recharge_On(false)
    , st_Ros_Recharge_Ok(false)
    , st_Ros_BatteryFail(false)
    , NofBitStatusRos(false)  {
    }
  BitStatusRos_(const ContainerAllocator& _alloc)
    : st_Ros_BumpFront(false)
    , st_Ros_BumpRear(false)
    , st_Ros_FallFront(false)
    , st_Ros_FallRear(false)
    , st_Ros_Emergenza(false)
    , st_Ros_ErrInt1(false)
    , st_Ros_ErrInt2(false)
    , st_Ros_Mot_DX_Fail(false)
    , st_Ros_Mot_SX_Fail(false)
    , st_Ros_Recharge_Found(false)
    , st_Ros_Recharge_On(false)
    , st_Ros_Recharge_Ok(false)
    , st_Ros_BatteryFail(false)
    , NofBitStatusRos(false)  {
  (void)_alloc;
    }



   typedef uint8_t _st_Ros_BumpFront_type;
  _st_Ros_BumpFront_type st_Ros_BumpFront;

   typedef uint8_t _st_Ros_BumpRear_type;
  _st_Ros_BumpRear_type st_Ros_BumpRear;

   typedef uint8_t _st_Ros_FallFront_type;
  _st_Ros_FallFront_type st_Ros_FallFront;

   typedef uint8_t _st_Ros_FallRear_type;
  _st_Ros_FallRear_type st_Ros_FallRear;

   typedef uint8_t _st_Ros_Emergenza_type;
  _st_Ros_Emergenza_type st_Ros_Emergenza;

   typedef uint8_t _st_Ros_ErrInt1_type;
  _st_Ros_ErrInt1_type st_Ros_ErrInt1;

   typedef uint8_t _st_Ros_ErrInt2_type;
  _st_Ros_ErrInt2_type st_Ros_ErrInt2;

   typedef uint8_t _st_Ros_Mot_DX_Fail_type;
  _st_Ros_Mot_DX_Fail_type st_Ros_Mot_DX_Fail;

   typedef uint8_t _st_Ros_Mot_SX_Fail_type;
  _st_Ros_Mot_SX_Fail_type st_Ros_Mot_SX_Fail;

   typedef uint8_t _st_Ros_Recharge_Found_type;
  _st_Ros_Recharge_Found_type st_Ros_Recharge_Found;

   typedef uint8_t _st_Ros_Recharge_On_type;
  _st_Ros_Recharge_On_type st_Ros_Recharge_On;

   typedef uint8_t _st_Ros_Recharge_Ok_type;
  _st_Ros_Recharge_Ok_type st_Ros_Recharge_Ok;

   typedef uint8_t _st_Ros_BatteryFail_type;
  _st_Ros_BatteryFail_type st_Ros_BatteryFail;

   typedef uint8_t _NofBitStatusRos_type;
  _NofBitStatusRos_type NofBitStatusRos;





  typedef boost::shared_ptr< ::lcr_driver::BitStatusRos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcr_driver::BitStatusRos_<ContainerAllocator> const> ConstPtr;

}; // struct BitStatusRos_

typedef ::lcr_driver::BitStatusRos_<std::allocator<void> > BitStatusRos;

typedef boost::shared_ptr< ::lcr_driver::BitStatusRos > BitStatusRosPtr;
typedef boost::shared_ptr< ::lcr_driver::BitStatusRos const> BitStatusRosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcr_driver::BitStatusRos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcr_driver::BitStatusRos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcr_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lcr_driver': ['/home/lcr/catkin_ws/src/lcr_driver/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcr_driver::BitStatusRos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcr_driver::BitStatusRos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcr_driver::BitStatusRos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcr_driver::BitStatusRos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcr_driver::BitStatusRos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcr_driver::BitStatusRos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcr_driver::BitStatusRos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2253552a57ac1bef3af9f6d07aaff730";
  }

  static const char* value(const ::lcr_driver::BitStatusRos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2253552a57ac1befULL;
  static const uint64_t static_value2 = 0x3af9f6d07aaff730ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcr_driver::BitStatusRos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcr_driver/BitStatusRos";
  }

  static const char* value(const ::lcr_driver::BitStatusRos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcr_driver::BitStatusRos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool st_Ros_BumpFront\n\
bool st_Ros_BumpRear\n\
bool st_Ros_FallFront\n\
bool st_Ros_FallRear\n\
bool st_Ros_Emergenza\n\
bool st_Ros_ErrInt1\n\
bool st_Ros_ErrInt2\n\
bool st_Ros_Mot_DX_Fail\n\
bool st_Ros_Mot_SX_Fail\n\
bool st_Ros_Recharge_Found\n\
bool st_Ros_Recharge_On\n\
bool st_Ros_Recharge_Ok\n\
bool st_Ros_BatteryFail\n\
bool NofBitStatusRos\n\
";
  }

  static const char* value(const ::lcr_driver::BitStatusRos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcr_driver::BitStatusRos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.st_Ros_BumpFront);
      stream.next(m.st_Ros_BumpRear);
      stream.next(m.st_Ros_FallFront);
      stream.next(m.st_Ros_FallRear);
      stream.next(m.st_Ros_Emergenza);
      stream.next(m.st_Ros_ErrInt1);
      stream.next(m.st_Ros_ErrInt2);
      stream.next(m.st_Ros_Mot_DX_Fail);
      stream.next(m.st_Ros_Mot_SX_Fail);
      stream.next(m.st_Ros_Recharge_Found);
      stream.next(m.st_Ros_Recharge_On);
      stream.next(m.st_Ros_Recharge_Ok);
      stream.next(m.st_Ros_BatteryFail);
      stream.next(m.NofBitStatusRos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BitStatusRos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcr_driver::BitStatusRos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcr_driver::BitStatusRos_<ContainerAllocator>& v)
  {
    s << indent << "st_Ros_BumpFront: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_BumpFront);
    s << indent << "st_Ros_BumpRear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_BumpRear);
    s << indent << "st_Ros_FallFront: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_FallFront);
    s << indent << "st_Ros_FallRear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_FallRear);
    s << indent << "st_Ros_Emergenza: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_Emergenza);
    s << indent << "st_Ros_ErrInt1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_ErrInt1);
    s << indent << "st_Ros_ErrInt2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_ErrInt2);
    s << indent << "st_Ros_Mot_DX_Fail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_Mot_DX_Fail);
    s << indent << "st_Ros_Mot_SX_Fail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_Mot_SX_Fail);
    s << indent << "st_Ros_Recharge_Found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_Recharge_Found);
    s << indent << "st_Ros_Recharge_On: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_Recharge_On);
    s << indent << "st_Ros_Recharge_Ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_Recharge_Ok);
    s << indent << "st_Ros_BatteryFail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.st_Ros_BatteryFail);
    s << indent << "NofBitStatusRos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.NofBitStatusRos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCR_DRIVER_MESSAGE_BITSTATUSROS_H
