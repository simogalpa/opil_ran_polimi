// Generated by gencpp from file lcr_shared/LCRtagSaver.msg
// DO NOT EDIT!


#ifndef LCR_SHARED_MESSAGE_LCRTAGSAVER_H
#define LCR_SHARED_MESSAGE_LCRTAGSAVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcr_shared
{
template <class ContainerAllocator>
struct LCRtagSaver_
{
  typedef LCRtagSaver_<ContainerAllocator> Type;

  LCRtagSaver_()
    : type()
    , id(0)  {
    }
  LCRtagSaver_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::lcr_shared::LCRtagSaver_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcr_shared::LCRtagSaver_<ContainerAllocator> const> ConstPtr;

}; // struct LCRtagSaver_

typedef ::lcr_shared::LCRtagSaver_<std::allocator<void> > LCRtagSaver;

typedef boost::shared_ptr< ::lcr_shared::LCRtagSaver > LCRtagSaverPtr;
typedef boost::shared_ptr< ::lcr_shared::LCRtagSaver const> LCRtagSaverConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcr_shared::LCRtagSaver_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcr_shared

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'lcr_shared': ['/home/lcr/catkin_ws/src/lcr_shared/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcr_shared::LCRtagSaver_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcr_shared::LCRtagSaver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcr_shared::LCRtagSaver_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb7d931af6cd060b0953169ea5e1f692";
  }

  static const char* value(const ::lcr_shared::LCRtagSaver_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb7d931af6cd060bULL;
  static const uint64_t static_value2 = 0x0953169ea5e1f692ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcr_shared/LCRtagSaver";
  }

  static const char* value(const ::lcr_shared::LCRtagSaver_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n\
int32 id\n\
";
  }

  static const char* value(const ::lcr_shared::LCRtagSaver_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LCRtagSaver_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcr_shared::LCRtagSaver_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcr_shared::LCRtagSaver_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCR_SHARED_MESSAGE_LCRTAGSAVER_H
