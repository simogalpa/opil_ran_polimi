// Generated by gencpp from file lcr_shared/LCRStatus.msg
// DO NOT EDIT!


#ifndef LCR_SHARED_MESSAGE_LCRSTATUS_H
#define LCR_SHARED_MESSAGE_LCRSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/Header.h>
#include <std_msgs/Header.h>
#include <std_msgs/Header.h>
#include <std_msgs/Header.h>
#include <std_msgs/Header.h>

namespace lcr_shared
{
template <class ContainerAllocator>
struct LCRStatus_
{
  typedef LCRStatus_<ContainerAllocator> Type;

  LCRStatus_()
    : virtual_object_version_id(0)
    , mission_id()
    , wcs_adapter_ros_header()
    , status(0)
    , tag_seen(0)
    , position()
    , yaw(0.0)
    , navigation_header()
    , error_type(0)
    , error_id()
    , error_header()
    , emergenza(false)
    , bump_front(false)
    , bump_rear(false)
    , fall_front(false)
    , fall_rear(false)
    , motore_dx_fail(false)
    , motore_sx_fail(false)
    , errore_int_1(false)
    , errore_int_2(false)
    , battery_fail(false)
    , battery_power(0)
    , recharge_found(false)
    , recharge_on(false)
    , recharge_ok(false)
    , hardware_status_header()
    , serial_ok(false)
    , serial_info(0)
    , serial_header()
    , laser_ok(false)
    , laser_info(0)
    , laser_header()
    , planner_status()
    , planner_info(0)
    , controller_status()
    , nextNode(0)  {
    }
  LCRStatus_(const ContainerAllocator& _alloc)
    : virtual_object_version_id(0)
    , mission_id(_alloc)
    , wcs_adapter_ros_header(_alloc)
    , status(0)
    , tag_seen(0)
    , position(_alloc)
    , yaw(0.0)
    , navigation_header(_alloc)
    , error_type(0)
    , error_id(_alloc)
    , error_header(_alloc)
    , emergenza(false)
    , bump_front(false)
    , bump_rear(false)
    , fall_front(false)
    , fall_rear(false)
    , motore_dx_fail(false)
    , motore_sx_fail(false)
    , errore_int_1(false)
    , errore_int_2(false)
    , battery_fail(false)
    , battery_power(0)
    , recharge_found(false)
    , recharge_on(false)
    , recharge_ok(false)
    , hardware_status_header(_alloc)
    , serial_ok(false)
    , serial_info(0)
    , serial_header(_alloc)
    , laser_ok(false)
    , laser_info(0)
    , laser_header(_alloc)
    , planner_status(_alloc)
    , planner_info(0)
    , controller_status(_alloc)
    , nextNode(0)  {
  (void)_alloc;
    }



   typedef int32_t _virtual_object_version_id_type;
  _virtual_object_version_id_type virtual_object_version_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mission_id_type;
  _mission_id_type mission_id;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _wcs_adapter_ros_header_type;
  _wcs_adapter_ros_header_type wcs_adapter_ros_header;

   typedef int8_t _status_type;
  _status_type status;

   typedef int32_t _tag_seen_type;
  _tag_seen_type tag_seen;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _navigation_header_type;
  _navigation_header_type navigation_header;

   typedef int8_t _error_type_type;
  _error_type_type error_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_id_type;
  _error_id_type error_id;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _error_header_type;
  _error_header_type error_header;

   typedef uint8_t _emergenza_type;
  _emergenza_type emergenza;

   typedef uint8_t _bump_front_type;
  _bump_front_type bump_front;

   typedef uint8_t _bump_rear_type;
  _bump_rear_type bump_rear;

   typedef uint8_t _fall_front_type;
  _fall_front_type fall_front;

   typedef uint8_t _fall_rear_type;
  _fall_rear_type fall_rear;

   typedef uint8_t _motore_dx_fail_type;
  _motore_dx_fail_type motore_dx_fail;

   typedef uint8_t _motore_sx_fail_type;
  _motore_sx_fail_type motore_sx_fail;

   typedef uint8_t _errore_int_1_type;
  _errore_int_1_type errore_int_1;

   typedef uint8_t _errore_int_2_type;
  _errore_int_2_type errore_int_2;

   typedef uint8_t _battery_fail_type;
  _battery_fail_type battery_fail;

   typedef int32_t _battery_power_type;
  _battery_power_type battery_power;

   typedef uint8_t _recharge_found_type;
  _recharge_found_type recharge_found;

   typedef uint8_t _recharge_on_type;
  _recharge_on_type recharge_on;

   typedef uint8_t _recharge_ok_type;
  _recharge_ok_type recharge_ok;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _hardware_status_header_type;
  _hardware_status_header_type hardware_status_header;

   typedef uint8_t _serial_ok_type;
  _serial_ok_type serial_ok;

   typedef int8_t _serial_info_type;
  _serial_info_type serial_info;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _serial_header_type;
  _serial_header_type serial_header;

   typedef uint8_t _laser_ok_type;
  _laser_ok_type laser_ok;

   typedef int8_t _laser_info_type;
  _laser_info_type laser_info;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _laser_header_type;
  _laser_header_type laser_header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _planner_status_type;
  _planner_status_type planner_status;

   typedef int8_t _planner_info_type;
  _planner_info_type planner_info;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _controller_status_type;
  _controller_status_type controller_status;

   typedef int32_t _nextNode_type;
  _nextNode_type nextNode;



  enum {
    SHUTDOWN = 0,
    POWERED = 1,
    SYNCHRONIZING = 2,
    LOCALIZING = 3,
    RUN = 4,
    LOST = 5,
    CHARGING = 6,
    LOCALIZATION_REQUIRED = 7,
    ECO = 8,
    STATUS_SIZE = 9,
    RUNNING = 0,
    RESTART = 1,
    STOPPED = 2,
  };


  typedef boost::shared_ptr< ::lcr_shared::LCRStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcr_shared::LCRStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LCRStatus_

typedef ::lcr_shared::LCRStatus_<std::allocator<void> > LCRStatus;

typedef boost::shared_ptr< ::lcr_shared::LCRStatus > LCRStatusPtr;
typedef boost::shared_ptr< ::lcr_shared::LCRStatus const> LCRStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcr_shared::LCRStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcr_shared::LCRStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcr_shared

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'lcr_shared': ['/home/lcr/catkin_ws/src/lcr_shared/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcr_shared::LCRStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcr_shared::LCRStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcr_shared::LCRStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcr_shared::LCRStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcr_shared::LCRStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcr_shared::LCRStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcr_shared::LCRStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0b17cfb00f69212db580b1be903bfd6";
  }

  static const char* value(const ::lcr_shared::LCRStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0b17cfb00f69212ULL;
  static const uint64_t static_value2 = 0xdb580b1be903bfd6ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcr_shared::LCRStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcr_shared/LCRStatus";
  }

  static const char* value(const ::lcr_shared::LCRStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcr_shared::LCRStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 virtual_object_version_id\n\
string mission_id\n\
Header wcs_adapter_ros_header\n\
\n\
#Possibili valori di status \n\
int8 SHUTDOWN = 0 #robot in fase di arresto o riavvio\n\
int8 POWERED = 1  #tasto power premuto\n\
int8 SYNCHRONIZING = 2 #arrivata richiesta di sincronizzazione\n\
int8 LOCALIZING = 3 #in fase di setup. Il tasto run è premuto ma il robot non è stato ancora localizzato.\n\
int8 RUN = 4 #robot localizzato e funzionante, il comando del robot è in carico alla GUI Onit.\n\
int8 LOST = 5 #robot perso\n\
int8 CHARGING = 6 #robot in fase di ricarica\n\
int8 LOCALIZATION_REQUIRED = 7 #il robot deve essere localizzato con un tag\n\
int8 ECO = 8 #modalità eco attiva\n\
int8 STATUS_SIZE = 9 #delimiter of status size\n\
\n\
# informazioni aggiuntive per il WCS adapter: *_info\n\
int8 RUNNING = 0\n\
int8 RESTART = 1\n\
int8 STOPPED = 2\n\
\n\
int8 status\n\
int32 tag_seen # -1 , nessun tag visto, altrimenti id tag\n\
geometry_msgs/Pose position\n\
float64 yaw\n\
Header navigation_header\n\
\n\
int8 error_type #0 no error\n\
string error_id\n\
Header error_header\n\
\n\
bool emergenza #bottone premuto\n\
bool bump_front\n\
bool bump_rear\n\
bool fall_front\n\
bool fall_rear\n\
bool motore_dx_fail #surriscaldamento o corto\n\
bool motore_sx_fail #surriscaldamento o corto\n\
bool errore_int_1 #errore elettronico irrecuperabile\n\
bool errore_int_2 #errore elettronico irrecuperabile\n\
bool battery_fail #tensione di batteria troppo bassa\n\
int32 battery_power #percentuale\n\
bool recharge_found\n\
bool recharge_on\n\
bool recharge_ok\n\
Header hardware_status_header\n\
\n\
bool serial_ok\n\
int8 serial_info\n\
Header serial_header\n\
\n\
bool laser_ok\n\
int8 laser_info\n\
Header laser_header\n\
\n\
string planner_status\n\
int8 planner_info\n\
\n\
string controller_status\n\
int32 nextNode\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::lcr_shared::LCRStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcr_shared::LCRStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.virtual_object_version_id);
      stream.next(m.mission_id);
      stream.next(m.wcs_adapter_ros_header);
      stream.next(m.status);
      stream.next(m.tag_seen);
      stream.next(m.position);
      stream.next(m.yaw);
      stream.next(m.navigation_header);
      stream.next(m.error_type);
      stream.next(m.error_id);
      stream.next(m.error_header);
      stream.next(m.emergenza);
      stream.next(m.bump_front);
      stream.next(m.bump_rear);
      stream.next(m.fall_front);
      stream.next(m.fall_rear);
      stream.next(m.motore_dx_fail);
      stream.next(m.motore_sx_fail);
      stream.next(m.errore_int_1);
      stream.next(m.errore_int_2);
      stream.next(m.battery_fail);
      stream.next(m.battery_power);
      stream.next(m.recharge_found);
      stream.next(m.recharge_on);
      stream.next(m.recharge_ok);
      stream.next(m.hardware_status_header);
      stream.next(m.serial_ok);
      stream.next(m.serial_info);
      stream.next(m.serial_header);
      stream.next(m.laser_ok);
      stream.next(m.laser_info);
      stream.next(m.laser_header);
      stream.next(m.planner_status);
      stream.next(m.planner_info);
      stream.next(m.controller_status);
      stream.next(m.nextNode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LCRStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcr_shared::LCRStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcr_shared::LCRStatus_<ContainerAllocator>& v)
  {
    s << indent << "virtual_object_version_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.virtual_object_version_id);
    s << indent << "mission_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mission_id);
    s << indent << "wcs_adapter_ros_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.wcs_adapter_ros_header);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "tag_seen: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tag_seen);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "navigation_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.navigation_header);
    s << indent << "error_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.error_type);
    s << indent << "error_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_id);
    s << indent << "error_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.error_header);
    s << indent << "emergenza: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergenza);
    s << indent << "bump_front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bump_front);
    s << indent << "bump_rear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bump_rear);
    s << indent << "fall_front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fall_front);
    s << indent << "fall_rear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fall_rear);
    s << indent << "motore_dx_fail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motore_dx_fail);
    s << indent << "motore_sx_fail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motore_sx_fail);
    s << indent << "errore_int_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.errore_int_1);
    s << indent << "errore_int_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.errore_int_2);
    s << indent << "battery_fail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_fail);
    s << indent << "battery_power: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_power);
    s << indent << "recharge_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recharge_found);
    s << indent << "recharge_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recharge_on);
    s << indent << "recharge_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recharge_ok);
    s << indent << "hardware_status_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.hardware_status_header);
    s << indent << "serial_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serial_ok);
    s << indent << "serial_info: ";
    Printer<int8_t>::stream(s, indent + "  ", v.serial_info);
    s << indent << "serial_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.serial_header);
    s << indent << "laser_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laser_ok);
    s << indent << "laser_info: ";
    Printer<int8_t>::stream(s, indent + "  ", v.laser_info);
    s << indent << "laser_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.laser_header);
    s << indent << "planner_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.planner_status);
    s << indent << "planner_info: ";
    Printer<int8_t>::stream(s, indent + "  ", v.planner_info);
    s << indent << "controller_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.controller_status);
    s << indent << "nextNode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nextNode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCR_SHARED_MESSAGE_LCRSTATUS_H
