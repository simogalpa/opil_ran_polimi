// Generated by gencpp from file lcr_shared/VirtualObjectsAndPaths.msg
// DO NOT EDIT!


#ifndef LCR_SHARED_MESSAGE_VIRTUALOBJECTSANDPATHS_H
#define LCR_SHARED_MESSAGE_VIRTUALOBJECTSANDPATHS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcr_shared
{
template <class ContainerAllocator>
struct VirtualObjectsAndPaths_
{
  typedef VirtualObjectsAndPaths_<ContainerAllocator> Type;

  VirtualObjectsAndPaths_()
    : version(0)
    , virtualObjects_Id()
    , virtualObjects_Name()
    , virtualObjects_ObjectType()
    , virtualObjects_PositionX()
    , virtualObjects_PositionY()
    , virtualObjects_Rotation()
    , virtualObjects_ShapeType()
    , paths_Id()
    , paths_CurvePointX()
    , paths_CurvePointY()
    , paths_Direction()
    , paths_EndPoint()
    , paths_Name()
    , paths_PathType()
    , paths_StartPoint()  {
    }
  VirtualObjectsAndPaths_(const ContainerAllocator& _alloc)
    : version(0)
    , virtualObjects_Id(_alloc)
    , virtualObjects_Name(_alloc)
    , virtualObjects_ObjectType(_alloc)
    , virtualObjects_PositionX(_alloc)
    , virtualObjects_PositionY(_alloc)
    , virtualObjects_Rotation(_alloc)
    , virtualObjects_ShapeType(_alloc)
    , paths_Id(_alloc)
    , paths_CurvePointX(_alloc)
    , paths_CurvePointY(_alloc)
    , paths_Direction(_alloc)
    , paths_EndPoint(_alloc)
    , paths_Name(_alloc)
    , paths_PathType(_alloc)
    , paths_StartPoint(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _version_type;
  _version_type version;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _virtualObjects_Id_type;
  _virtualObjects_Id_type virtualObjects_Id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _virtualObjects_Name_type;
  _virtualObjects_Name_type virtualObjects_Name;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _virtualObjects_ObjectType_type;
  _virtualObjects_ObjectType_type virtualObjects_ObjectType;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _virtualObjects_PositionX_type;
  _virtualObjects_PositionX_type virtualObjects_PositionX;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _virtualObjects_PositionY_type;
  _virtualObjects_PositionY_type virtualObjects_PositionY;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _virtualObjects_Rotation_type;
  _virtualObjects_Rotation_type virtualObjects_Rotation;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _virtualObjects_ShapeType_type;
  _virtualObjects_ShapeType_type virtualObjects_ShapeType;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _paths_Id_type;
  _paths_Id_type paths_Id;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _paths_CurvePointX_type;
  _paths_CurvePointX_type paths_CurvePointX;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _paths_CurvePointY_type;
  _paths_CurvePointY_type paths_CurvePointY;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _paths_Direction_type;
  _paths_Direction_type paths_Direction;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _paths_EndPoint_type;
  _paths_EndPoint_type paths_EndPoint;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _paths_Name_type;
  _paths_Name_type paths_Name;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _paths_PathType_type;
  _paths_PathType_type paths_PathType;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _paths_StartPoint_type;
  _paths_StartPoint_type paths_StartPoint;



  enum {
    OBJECTTYPE_TAG = -3,
    OBJECTTYPE_RECHARGE_WAYPOINT = -2,
    OBJECTTYPE_NONE = -1,
    OBJECTTYPE_OBSTACLE = 0,
    OBJECTTYPE_CHARGEPOINT = 1,
    OBJECTTYPE_CHECKPOINT = 2,
    OBJECTTYPE_SPEED_LIMIT_ZONE = 3,
    OBJECTTYPE_NO_DISTANCE_ZONE = 4,
    SHAPETYPE_NONE = -1,
    SHAPETYPE_LINE = 0,
    SHAPETYPE_RECTANGLE = 1,
    SHAPETYPE_CIRCLE = 2,
    SHAPETYPE_POLYGON = 3,
    PATHTYPE_LINEPATH = 0,
    PATHTYPE_CURVEPATH = 1,
    PATHDIRECTION_TWO_WAY = 0,
    PATHDIRECTION_FROM_A_TO_B = 1,
    PATHDIRECTION_FROM_B_TO_A = 2,
    PATHDIRECTION_ALTERNATING_ONE_WAY = 3,
  };


  typedef boost::shared_ptr< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> const> ConstPtr;

}; // struct VirtualObjectsAndPaths_

typedef ::lcr_shared::VirtualObjectsAndPaths_<std::allocator<void> > VirtualObjectsAndPaths;

typedef boost::shared_ptr< ::lcr_shared::VirtualObjectsAndPaths > VirtualObjectsAndPathsPtr;
typedef boost::shared_ptr< ::lcr_shared::VirtualObjectsAndPaths const> VirtualObjectsAndPathsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcr_shared

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'lcr_shared': ['/home/lcr/catkin_ws/src/lcr_shared/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20a0913958c29e6abb9bdb538fd57fdd";
  }

  static const char* value(const ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20a0913958c29e6aULL;
  static const uint64_t static_value2 = 0xbb9bdb538fd57fddULL;
};

template<class ContainerAllocator>
struct DataType< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcr_shared/VirtualObjectsAndPaths";
  }

  static const char* value(const ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 version\n\
\n\
int8 OBJECTTYPE_TAG = -3\n\
int8 OBJECTTYPE_RECHARGE_WAYPOINT = -2\n\
int8 OBJECTTYPE_NONE = -1\n\
int8 OBJECTTYPE_OBSTACLE = 0\n\
int8 OBJECTTYPE_CHARGEPOINT = 1\n\
int8 OBJECTTYPE_CHECKPOINT = 2\n\
int8 OBJECTTYPE_SPEED_LIMIT_ZONE = 3\n\
int8 OBJECTTYPE_NO_DISTANCE_ZONE = 4\n\
\n\
int8 SHAPETYPE_NONE = -1\n\
int8 SHAPETYPE_LINE = 0\n\
int8 SHAPETYPE_RECTANGLE = 1\n\
int8 SHAPETYPE_CIRCLE = 2\n\
int8 SHAPETYPE_POLYGON = 3\n\
\n\
int32[] virtualObjects_Id\n\
string[] virtualObjects_Name\n\
int8[] virtualObjects_ObjectType\n\
int32[] virtualObjects_PositionX\n\
int32[] virtualObjects_PositionY\n\
float64[] virtualObjects_Rotation\n\
int8[] virtualObjects_ShapeType\n\
\n\
int8 PATHTYPE_LINEPATH = 0\n\
int8 PATHTYPE_CURVEPATH = 1\n\
\n\
int8 PATHDIRECTION_TWO_WAY = 0\n\
int8 PATHDIRECTION_FROM_A_TO_B = 1\n\
int8 PATHDIRECTION_FROM_B_TO_A = 2\n\
int8 PATHDIRECTION_ALTERNATING_ONE_WAY = 3\n\
\n\
int32[] paths_Id\n\
int32[] paths_CurvePointX\n\
int32[] paths_CurvePointY\n\
int32[] paths_Direction\n\
int32[] paths_EndPoint\n\
string[] paths_Name\n\
int8[] paths_PathType\n\
int32[] paths_StartPoint\n\
";
  }

  static const char* value(const ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.version);
      stream.next(m.virtualObjects_Id);
      stream.next(m.virtualObjects_Name);
      stream.next(m.virtualObjects_ObjectType);
      stream.next(m.virtualObjects_PositionX);
      stream.next(m.virtualObjects_PositionY);
      stream.next(m.virtualObjects_Rotation);
      stream.next(m.virtualObjects_ShapeType);
      stream.next(m.paths_Id);
      stream.next(m.paths_CurvePointX);
      stream.next(m.paths_CurvePointY);
      stream.next(m.paths_Direction);
      stream.next(m.paths_EndPoint);
      stream.next(m.paths_Name);
      stream.next(m.paths_PathType);
      stream.next(m.paths_StartPoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VirtualObjectsAndPaths_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcr_shared::VirtualObjectsAndPaths_<ContainerAllocator>& v)
  {
    s << indent << "version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.version);
    s << indent << "virtualObjects_Id[]" << std::endl;
    for (size_t i = 0; i < v.virtualObjects_Id.size(); ++i)
    {
      s << indent << "  virtualObjects_Id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.virtualObjects_Id[i]);
    }
    s << indent << "virtualObjects_Name[]" << std::endl;
    for (size_t i = 0; i < v.virtualObjects_Name.size(); ++i)
    {
      s << indent << "  virtualObjects_Name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.virtualObjects_Name[i]);
    }
    s << indent << "virtualObjects_ObjectType[]" << std::endl;
    for (size_t i = 0; i < v.virtualObjects_ObjectType.size(); ++i)
    {
      s << indent << "  virtualObjects_ObjectType[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.virtualObjects_ObjectType[i]);
    }
    s << indent << "virtualObjects_PositionX[]" << std::endl;
    for (size_t i = 0; i < v.virtualObjects_PositionX.size(); ++i)
    {
      s << indent << "  virtualObjects_PositionX[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.virtualObjects_PositionX[i]);
    }
    s << indent << "virtualObjects_PositionY[]" << std::endl;
    for (size_t i = 0; i < v.virtualObjects_PositionY.size(); ++i)
    {
      s << indent << "  virtualObjects_PositionY[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.virtualObjects_PositionY[i]);
    }
    s << indent << "virtualObjects_Rotation[]" << std::endl;
    for (size_t i = 0; i < v.virtualObjects_Rotation.size(); ++i)
    {
      s << indent << "  virtualObjects_Rotation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.virtualObjects_Rotation[i]);
    }
    s << indent << "virtualObjects_ShapeType[]" << std::endl;
    for (size_t i = 0; i < v.virtualObjects_ShapeType.size(); ++i)
    {
      s << indent << "  virtualObjects_ShapeType[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.virtualObjects_ShapeType[i]);
    }
    s << indent << "paths_Id[]" << std::endl;
    for (size_t i = 0; i < v.paths_Id.size(); ++i)
    {
      s << indent << "  paths_Id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.paths_Id[i]);
    }
    s << indent << "paths_CurvePointX[]" << std::endl;
    for (size_t i = 0; i < v.paths_CurvePointX.size(); ++i)
    {
      s << indent << "  paths_CurvePointX[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.paths_CurvePointX[i]);
    }
    s << indent << "paths_CurvePointY[]" << std::endl;
    for (size_t i = 0; i < v.paths_CurvePointY.size(); ++i)
    {
      s << indent << "  paths_CurvePointY[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.paths_CurvePointY[i]);
    }
    s << indent << "paths_Direction[]" << std::endl;
    for (size_t i = 0; i < v.paths_Direction.size(); ++i)
    {
      s << indent << "  paths_Direction[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.paths_Direction[i]);
    }
    s << indent << "paths_EndPoint[]" << std::endl;
    for (size_t i = 0; i < v.paths_EndPoint.size(); ++i)
    {
      s << indent << "  paths_EndPoint[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.paths_EndPoint[i]);
    }
    s << indent << "paths_Name[]" << std::endl;
    for (size_t i = 0; i < v.paths_Name.size(); ++i)
    {
      s << indent << "  paths_Name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.paths_Name[i]);
    }
    s << indent << "paths_PathType[]" << std::endl;
    for (size_t i = 0; i < v.paths_PathType.size(); ++i)
    {
      s << indent << "  paths_PathType[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.paths_PathType[i]);
    }
    s << indent << "paths_StartPoint[]" << std::endl;
    for (size_t i = 0; i < v.paths_StartPoint.size(); ++i)
    {
      s << indent << "  paths_StartPoint[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.paths_StartPoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCR_SHARED_MESSAGE_VIRTUALOBJECTSANDPATHS_H
