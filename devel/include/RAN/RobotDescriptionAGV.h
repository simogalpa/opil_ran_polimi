// Generated by gencpp from file RAN/RobotDescriptionAGV.msg
// DO NOT EDIT!


#ifndef RAN_MESSAGE_ROBOTDESCRIPTIONAGV_H
#define RAN_MESSAGE_ROBOTDESCRIPTIONAGV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mars_agent_physical_robot_msgs/RobotAction.h>

namespace RAN
{
template <class ContainerAllocator>
struct RobotDescriptionAGV_
{
  typedef RobotDescriptionAGV_<ContainerAllocator> Type;

  RobotDescriptionAGV_()
    : left_size(0.0)
    , right_size(0.0)
    , front_size(0.0)
    , rear_size(0.0)
    , min_height(0.0)
    , max_height(0.0)
    , payload(0.0)
    , max_pos_x_vel(0.0)
    , max_neg_x_vel(0.0)
    , max_pos_x_acc(0.0)
    , max_neg_x_acc(0.0)
    , max_pos_y_vel(0.0)
    , max_neg_y_vel(0.0)
    , max_pos_y_acc(0.0)
    , max_neg_y_acc(0.0)
    , max_pos_ang_vel(0.0)
    , max_neg_ang_vel(0.0)
    , max_pos_ang_acc(0.0)
    , max_neg_ang_acc(0.0)
    , velocity_control_sensitivity(0.0)
    , min_turning_radius(0.0)
    , batt_capacity(0.0)
    , batt_max_voltage(0.0)
    , vehicle_type(0)
    , vendor()
    , action_capability()  {
    }
  RobotDescriptionAGV_(const ContainerAllocator& _alloc)
    : left_size(0.0)
    , right_size(0.0)
    , front_size(0.0)
    , rear_size(0.0)
    , min_height(0.0)
    , max_height(0.0)
    , payload(0.0)
    , max_pos_x_vel(0.0)
    , max_neg_x_vel(0.0)
    , max_pos_x_acc(0.0)
    , max_neg_x_acc(0.0)
    , max_pos_y_vel(0.0)
    , max_neg_y_vel(0.0)
    , max_pos_y_acc(0.0)
    , max_neg_y_acc(0.0)
    , max_pos_ang_vel(0.0)
    , max_neg_ang_vel(0.0)
    , max_pos_ang_acc(0.0)
    , max_neg_ang_acc(0.0)
    , velocity_control_sensitivity(0.0)
    , min_turning_radius(0.0)
    , batt_capacity(0.0)
    , batt_max_voltage(0.0)
    , vehicle_type(0)
    , vendor(_alloc)
    , action_capability(_alloc)  {
  (void)_alloc;
    }



   typedef float _left_size_type;
  _left_size_type left_size;

   typedef float _right_size_type;
  _right_size_type right_size;

   typedef float _front_size_type;
  _front_size_type front_size;

   typedef float _rear_size_type;
  _rear_size_type rear_size;

   typedef float _min_height_type;
  _min_height_type min_height;

   typedef float _max_height_type;
  _max_height_type max_height;

   typedef float _payload_type;
  _payload_type payload;

   typedef float _max_pos_x_vel_type;
  _max_pos_x_vel_type max_pos_x_vel;

   typedef float _max_neg_x_vel_type;
  _max_neg_x_vel_type max_neg_x_vel;

   typedef float _max_pos_x_acc_type;
  _max_pos_x_acc_type max_pos_x_acc;

   typedef float _max_neg_x_acc_type;
  _max_neg_x_acc_type max_neg_x_acc;

   typedef float _max_pos_y_vel_type;
  _max_pos_y_vel_type max_pos_y_vel;

   typedef float _max_neg_y_vel_type;
  _max_neg_y_vel_type max_neg_y_vel;

   typedef float _max_pos_y_acc_type;
  _max_pos_y_acc_type max_pos_y_acc;

   typedef float _max_neg_y_acc_type;
  _max_neg_y_acc_type max_neg_y_acc;

   typedef float _max_pos_ang_vel_type;
  _max_pos_ang_vel_type max_pos_ang_vel;

   typedef float _max_neg_ang_vel_type;
  _max_neg_ang_vel_type max_neg_ang_vel;

   typedef float _max_pos_ang_acc_type;
  _max_pos_ang_acc_type max_pos_ang_acc;

   typedef float _max_neg_ang_acc_type;
  _max_neg_ang_acc_type max_neg_ang_acc;

   typedef float _velocity_control_sensitivity_type;
  _velocity_control_sensitivity_type velocity_control_sensitivity;

   typedef float _min_turning_radius_type;
  _min_turning_radius_type min_turning_radius;

   typedef float _batt_capacity_type;
  _batt_capacity_type batt_capacity;

   typedef float _batt_max_voltage_type;
  _batt_max_voltage_type batt_max_voltage;

   typedef uint8_t _vehicle_type_type;
  _vehicle_type_type vehicle_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vendor_type;
  _vendor_type vendor;

   typedef std::vector< ::mars_agent_physical_robot_msgs::RobotAction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mars_agent_physical_robot_msgs::RobotAction_<ContainerAllocator> >::other >  _action_capability_type;
  _action_capability_type action_capability;





  typedef boost::shared_ptr< ::RAN::RobotDescriptionAGV_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RAN::RobotDescriptionAGV_<ContainerAllocator> const> ConstPtr;

}; // struct RobotDescriptionAGV_

typedef ::RAN::RobotDescriptionAGV_<std::allocator<void> > RobotDescriptionAGV;

typedef boost::shared_ptr< ::RAN::RobotDescriptionAGV > RobotDescriptionAGVPtr;
typedef boost::shared_ptr< ::RAN::RobotDescriptionAGV const> RobotDescriptionAGVConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RAN::RobotDescriptionAGV_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace RAN

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mars_agent_physical_robot_msgs': ['/home/lcr/catkin_ws/src/mars_agent_physical_robot_msg-master/msg'], 'RAN': ['/home/lcr/catkin_ws/src/RAN/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sim_msgs': ['/home/lcr/catkin_ws/src/sim_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mars_common_msgs': ['/home/lcr/catkin_ws/src/mars_common_msgs-master/msg'], 'industrial_msgs': ['/opt/ros/kinetic/share/industrial_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RAN::RobotDescriptionAGV_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RAN::RobotDescriptionAGV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RAN::RobotDescriptionAGV_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfb2343bc38ab59e121647c30a480bf2";
  }

  static const char* value(const ::RAN::RobotDescriptionAGV_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfb2343bc38ab59eULL;
  static const uint64_t static_value2 = 0x121647c30a480bf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RAN/RobotDescriptionAGV";
  }

  static const char* value(const ::RAN::RobotDescriptionAGV_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_size\n\
float32 right_size\n\
float32 front_size\n\
float32 rear_size\n\
float32 min_height\n\
float32 max_height\n\
float32 payload\n\
float32 max_pos_x_vel\n\
float32 max_neg_x_vel\n\
float32 max_pos_x_acc\n\
float32 max_neg_x_acc\n\
float32 max_pos_y_vel\n\
float32 max_neg_y_vel\n\
float32 max_pos_y_acc\n\
float32 max_neg_y_acc\n\
float32 max_pos_ang_vel\n\
float32 max_neg_ang_vel\n\
float32 max_pos_ang_acc\n\
float32 max_neg_ang_acc\n\
float32 velocity_control_sensitivity\n\
float32 min_turning_radius\n\
float32 batt_capacity\n\
float32 batt_max_voltage\n\
uint8 vehicle_type\n\
string vendor \n\
mars_agent_physical_robot_msgs/RobotAction[] action_capability\n\
\n\
================================================================================\n\
MSG: mars_agent_physical_robot_msgs/RobotAction\n\
# definition of all the possible actionsmars_agent_physical_robot_msgs\n\
uint8 CATEGORY_UNDEFINED = 0\n\
uint8 CATEGORY_NONE = 5\n\
uint8 CATEGORY_LOAD = 10\n\
uint8 CATEGORY_MANUAL_LOAD_START = 11\n\
uint8 CATEGORY_MANUAL_LOAD_DONE = 12\n\
uint8 CATEGORY_UNLOAD = 20\n\
uint8 CATEGORY_MANUAL_UNLOAD_START = 21\n\
uint8 CATEGORY_MANUAL_UNLOAD_DONE = 22\n\
uint8 CATEGORY_START_CHARGING = 30\n\
uint8 CATEGORY_STOP_CHARGING = 31\n\
# ...\n\
\n\
\n\
# Category of the action which has to be performed\n\
uint8 category\n\
# Defines the robot specific action which has to be performed. \n\
# The specific actions must be defined by manufacturer. \n\
uint8 action\n\
mars_common_msgs/Tuple[] attributes\n\
# Optional description of the action. E.g.: unload left\n\
string description\n\
\n\
\n\
================================================================================\n\
MSG: mars_common_msgs/Tuple\n\
string type\n\
string name\n\
string value\n\
";
  }

  static const char* value(const ::RAN::RobotDescriptionAGV_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_size);
      stream.next(m.right_size);
      stream.next(m.front_size);
      stream.next(m.rear_size);
      stream.next(m.min_height);
      stream.next(m.max_height);
      stream.next(m.payload);
      stream.next(m.max_pos_x_vel);
      stream.next(m.max_neg_x_vel);
      stream.next(m.max_pos_x_acc);
      stream.next(m.max_neg_x_acc);
      stream.next(m.max_pos_y_vel);
      stream.next(m.max_neg_y_vel);
      stream.next(m.max_pos_y_acc);
      stream.next(m.max_neg_y_acc);
      stream.next(m.max_pos_ang_vel);
      stream.next(m.max_neg_ang_vel);
      stream.next(m.max_pos_ang_acc);
      stream.next(m.max_neg_ang_acc);
      stream.next(m.velocity_control_sensitivity);
      stream.next(m.min_turning_radius);
      stream.next(m.batt_capacity);
      stream.next(m.batt_max_voltage);
      stream.next(m.vehicle_type);
      stream.next(m.vendor);
      stream.next(m.action_capability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotDescriptionAGV_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RAN::RobotDescriptionAGV_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RAN::RobotDescriptionAGV_<ContainerAllocator>& v)
  {
    s << indent << "left_size: ";
    Printer<float>::stream(s, indent + "  ", v.left_size);
    s << indent << "right_size: ";
    Printer<float>::stream(s, indent + "  ", v.right_size);
    s << indent << "front_size: ";
    Printer<float>::stream(s, indent + "  ", v.front_size);
    s << indent << "rear_size: ";
    Printer<float>::stream(s, indent + "  ", v.rear_size);
    s << indent << "min_height: ";
    Printer<float>::stream(s, indent + "  ", v.min_height);
    s << indent << "max_height: ";
    Printer<float>::stream(s, indent + "  ", v.max_height);
    s << indent << "payload: ";
    Printer<float>::stream(s, indent + "  ", v.payload);
    s << indent << "max_pos_x_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_pos_x_vel);
    s << indent << "max_neg_x_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_neg_x_vel);
    s << indent << "max_pos_x_acc: ";
    Printer<float>::stream(s, indent + "  ", v.max_pos_x_acc);
    s << indent << "max_neg_x_acc: ";
    Printer<float>::stream(s, indent + "  ", v.max_neg_x_acc);
    s << indent << "max_pos_y_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_pos_y_vel);
    s << indent << "max_neg_y_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_neg_y_vel);
    s << indent << "max_pos_y_acc: ";
    Printer<float>::stream(s, indent + "  ", v.max_pos_y_acc);
    s << indent << "max_neg_y_acc: ";
    Printer<float>::stream(s, indent + "  ", v.max_neg_y_acc);
    s << indent << "max_pos_ang_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_pos_ang_vel);
    s << indent << "max_neg_ang_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_neg_ang_vel);
    s << indent << "max_pos_ang_acc: ";
    Printer<float>::stream(s, indent + "  ", v.max_pos_ang_acc);
    s << indent << "max_neg_ang_acc: ";
    Printer<float>::stream(s, indent + "  ", v.max_neg_ang_acc);
    s << indent << "velocity_control_sensitivity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_control_sensitivity);
    s << indent << "min_turning_radius: ";
    Printer<float>::stream(s, indent + "  ", v.min_turning_radius);
    s << indent << "batt_capacity: ";
    Printer<float>::stream(s, indent + "  ", v.batt_capacity);
    s << indent << "batt_max_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.batt_max_voltage);
    s << indent << "vehicle_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_type);
    s << indent << "vendor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vendor);
    s << indent << "action_capability[]" << std::endl;
    for (size_t i = 0; i < v.action_capability.size(); ++i)
    {
      s << indent << "  action_capability[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mars_agent_physical_robot_msgs::RobotAction_<ContainerAllocator> >::stream(s, indent + "    ", v.action_capability[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAN_MESSAGE_ROBOTDESCRIPTIONAGV_H
