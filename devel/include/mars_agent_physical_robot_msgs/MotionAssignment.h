// Generated by gencpp from file mars_agent_physical_robot_msgs/MotionAssignment.msg
// DO NOT EDIT!


#ifndef MARS_AGENT_PHYSICAL_ROBOT_MSGS_MESSAGE_MOTIONASSIGNMENT_H
#define MARS_AGENT_PHYSICAL_ROBOT_MSGS_MESSAGE_MOTIONASSIGNMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mars_common_msgs/Id.h>
#include <mars_common_msgs/Id.h>
#include <mars_common_msgs/Id.h>
#include <mars_common_msgs/Id.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <geometry_msgs/PolygonStamped.h>
#include <mars_agent_physical_robot_msgs/Sequence.h>

namespace mars_agent_physical_robot_msgs
{
template <class ContainerAllocator>
struct MotionAssignment_
{
  typedef MotionAssignment_<ContainerAllocator> Type;

  MotionAssignment_()
    : header()
    , robot_id()
    , point_id()
    , task_id()
    , motion_id()
    , point()
    , is_waypoint(false)
    , use_orientation(false)
    , max_velocity()
    , max_acceleration()
    , motion_area()
    , sequence()  {
    }
  MotionAssignment_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot_id(_alloc)
    , point_id(_alloc)
    , task_id(_alloc)
    , motion_id(_alloc)
    , point(_alloc)
    , is_waypoint(false)
    , use_orientation(false)
    , max_velocity(_alloc)
    , max_acceleration(_alloc)
    , motion_area(_alloc)
    , sequence(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mars_common_msgs::Id_<ContainerAllocator>  _robot_id_type;
  _robot_id_type robot_id;

   typedef  ::mars_common_msgs::Id_<ContainerAllocator>  _point_id_type;
  _point_id_type point_id;

   typedef  ::mars_common_msgs::Id_<ContainerAllocator>  _task_id_type;
  _task_id_type task_id;

   typedef  ::mars_common_msgs::Id_<ContainerAllocator>  _motion_id_type;
  _motion_id_type motion_id;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef uint8_t _is_waypoint_type;
  _is_waypoint_type is_waypoint;

   typedef uint8_t _use_orientation_type;
  _use_orientation_type use_orientation;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _max_velocity_type;
  _max_velocity_type max_velocity;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _max_acceleration_type;
  _max_acceleration_type max_acceleration;

   typedef  ::geometry_msgs::PolygonStamped_<ContainerAllocator>  _motion_area_type;
  _motion_area_type motion_area;

   typedef  ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator>  _sequence_type;
  _sequence_type sequence;





  typedef boost::shared_ptr< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> const> ConstPtr;

}; // struct MotionAssignment_

typedef ::mars_agent_physical_robot_msgs::MotionAssignment_<std::allocator<void> > MotionAssignment;

typedef boost::shared_ptr< ::mars_agent_physical_robot_msgs::MotionAssignment > MotionAssignmentPtr;
typedef boost::shared_ptr< ::mars_agent_physical_robot_msgs::MotionAssignment const> MotionAssignmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mars_agent_physical_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'mars_agent_physical_robot_msgs': ['/home/lcr/catkin_ws/src/mars_agent_physical_robot_msg-master/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mars_common_msgs': ['/home/lcr/catkin_ws/src/mars_common_msgs-master/msg'], 'industrial_msgs': ['/opt/ros/kinetic/share/industrial_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4c5a46f20a838c5a572e0f81ed1d96f";
  }

  static const char* value(const ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4c5a46f20a838c5ULL;
  static const uint64_t static_value2 = 0xa572e0f81ed1d96fULL;
};

template<class ContainerAllocator>
struct DataType< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mars_agent_physical_robot_msgs/MotionAssignment";
  }

  static const char* value(const ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message concerning the assignment of a new Motion command\n\
Header header\n\
mars_common_msgs/Id robot_id\n\
mars_common_msgs/Id point_id\n\
mars_common_msgs/Id task_id\n\
mars_common_msgs/Id motion_id\n\
geometry_msgs/Pose2D point\n\
# TRUE if the point is a waypoint, FALSE if it is a goal\n\
bool is_waypoint\n\
# TRUE if the theta of the point has to be considered\n\
bool use_orientation\n\
geometry_msgs/Twist max_velocity\n\
geometry_msgs/Accel max_acceleration\n\
# defines the area in which the robot can move\n\
geometry_msgs/PolygonStamped motion_area\n\
# the position of the assignment in the sequence\n\
Sequence sequence\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: mars_common_msgs/Id\n\
# Universally Unique Identifier (UUID)\n\
# A UUID is a 128-bit number used to identify information in computer systems. \n\
# The term globally unique identifier (GUID) is also used. \n\
# More information: https://en.wikipedia.org/wiki/Universally_unique_identifier\n\
uint8[16] uuid\n\
\n\
# optional description of the id\n\
# description can be:\n\
#   - a name\n\
#   - what is descriped by the id\n\
#   - etc.\n\
string description\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# Deprecated\n\
# Please use the full 3D pose.\n\
\n\
# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n\
\n\
# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n\
\n\
\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PolygonStamped\n\
# This represents a Polygon with reference coordinate frame and timestamp\n\
Header header\n\
Polygon polygon\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: mars_agent_physical_robot_msgs/Sequence\n\
# Message for defining a sequence.\n\
\n\
# Actual position in the sequence. The sequence starts at 1! \n\
int32 sequence_number\n\
# Overall lenght of the sequence\n\
int32 length\n\
";
  }

  static const char* value(const ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot_id);
      stream.next(m.point_id);
      stream.next(m.task_id);
      stream.next(m.motion_id);
      stream.next(m.point);
      stream.next(m.is_waypoint);
      stream.next(m.use_orientation);
      stream.next(m.max_velocity);
      stream.next(m.max_acceleration);
      stream.next(m.motion_area);
      stream.next(m.sequence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionAssignment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mars_agent_physical_robot_msgs::MotionAssignment_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot_id: ";
    s << std::endl;
    Printer< ::mars_common_msgs::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_id);
    s << indent << "point_id: ";
    s << std::endl;
    Printer< ::mars_common_msgs::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.point_id);
    s << indent << "task_id: ";
    s << std::endl;
    Printer< ::mars_common_msgs::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.task_id);
    s << indent << "motion_id: ";
    s << std::endl;
    Printer< ::mars_common_msgs::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.motion_id);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "is_waypoint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_waypoint);
    s << indent << "use_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_orientation);
    s << indent << "max_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.max_velocity);
    s << indent << "max_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.max_acceleration);
    s << indent << "motion_area: ";
    s << std::endl;
    Printer< ::geometry_msgs::PolygonStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.motion_area);
    s << indent << "sequence: ";
    s << std::endl;
    Printer< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >::stream(s, indent + "  ", v.sequence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARS_AGENT_PHYSICAL_ROBOT_MSGS_MESSAGE_MOTIONASSIGNMENT_H
