// Generated by gencpp from file mars_agent_physical_robot_msgs/Sequence.msg
// DO NOT EDIT!


#ifndef MARS_AGENT_PHYSICAL_ROBOT_MSGS_MESSAGE_SEQUENCE_H
#define MARS_AGENT_PHYSICAL_ROBOT_MSGS_MESSAGE_SEQUENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mars_agent_physical_robot_msgs
{
template <class ContainerAllocator>
struct Sequence_
{
  typedef Sequence_<ContainerAllocator> Type;

  Sequence_()
    : sequence_number(0)
    , length(0)  {
    }
  Sequence_(const ContainerAllocator& _alloc)
    : sequence_number(0)
    , length(0)  {
  (void)_alloc;
    }



   typedef int32_t _sequence_number_type;
  _sequence_number_type sequence_number;

   typedef int32_t _length_type;
  _length_type length;





  typedef boost::shared_ptr< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> const> ConstPtr;

}; // struct Sequence_

typedef ::mars_agent_physical_robot_msgs::Sequence_<std::allocator<void> > Sequence;

typedef boost::shared_ptr< ::mars_agent_physical_robot_msgs::Sequence > SequencePtr;
typedef boost::shared_ptr< ::mars_agent_physical_robot_msgs::Sequence const> SequenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mars_agent_physical_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mars_agent_physical_robot_msgs': ['/home/lcr/catkin_ws/src/mars_agent_physical_robot_msg-master/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mars_common_msgs': ['/home/lcr/catkin_ws/src/mars_common_msgs-master/msg'], 'industrial_msgs': ['/opt/ros/kinetic/share/industrial_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a41f13649a83eba6bc20a688c3cb1f2";
  }

  static const char* value(const ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a41f13649a83ebaULL;
  static const uint64_t static_value2 = 0x6bc20a688c3cb1f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mars_agent_physical_robot_msgs/Sequence";
  }

  static const char* value(const ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for defining a sequence.\n\
\n\
# Actual position in the sequence. The sequence starts at 1! \n\
int32 sequence_number\n\
# Overall lenght of the sequence\n\
int32 length\n\
";
  }

  static const char* value(const ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sequence_number);
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sequence_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mars_agent_physical_robot_msgs::Sequence_<ContainerAllocator>& v)
  {
    s << indent << "sequence_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sequence_number);
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARS_AGENT_PHYSICAL_ROBOT_MSGS_MESSAGE_SEQUENCE_H
