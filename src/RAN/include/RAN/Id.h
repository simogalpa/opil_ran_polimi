/* ------------------------------------------------------------------------------------------------
 * Fraunhofer IML
 * Department Automation and Embedded Systems
 * ------------------------------------------------------------------------------------------------
 * project          : mars_common
 * ------------------------------------------------------------------------------------------------
 * Author(s)        : Dennis Luensch
 * Contact(s)       : dennis.luensch@iml.fraunhofer.de
 * ------------------------------------------------------------------------------------------------
 * Tabsize          : 2
 * Charset          : UTF-8
 * ---------------------------------------------------------------------------------------------
 */

#ifndef MARS_COMMON_ID_H
#define MARS_COMMON_ID_H

#include "exception/NotInitializedException.h"
#include "exception/SetParamException.h"

#include <mars_common_msgs/Id.h>

#include <boost/array.hpp>
#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_generators.hpp>

#include <array>
#include <sstream>
#include <string>

namespace mars
{
namespace common
{
typedef boost::array<char, 16> UUID;

class Id
{
public:
  enum UUIDFormat : int
  {
    BYTEWISE = 16,
    HEXDEC = 32,
    HEXDEC_SPLIT = 36
  };

  enum UUIDCreationType : int
  {
    CREATE_FROM_UUID = 0,
    CREATE_FROM_STRING = 1
  };

  /**
   * @brief Id Constructs an uninitialized Id
   */
  Id();

  /**
   * @brief Constructs an initialized Id from an Id message
   * @param pMsg Id message
   */
  Id(const mars_common_msgs::Id pMsg);

  /**
   * @brief Constructs an initialized Id
   * @param pUUID Unique identifier generated by boost. Only allowed to be generated by this class!
   * @param pDescription Description of the Id.
   */
  Id(const UUID& pUUID, const std::string& pDescription = "");

  /**
   * @brief Constructs an initialized Id
   * @param pUUID Unique identifier generated by boost. Only allowed to be generated by this class!
   * @param pDescription Description of the Id.
   */
  Id(const boost::array<uint8_t, 16>& pUUID, const std::string& pDescription = "");

  /**
   * @brief Constructs an Id from an id string or name.
   *
   * @param pUUID Unique identifier generated by boost. Only allowed to be generated by this class!
   * @param pDescription Description of the Id.
   * @param pUUIDCreationType type of the uuid string for the id creation.
   */
  Id(const std::string& pUUID, const std::string& pDescription = "",
     UUIDCreationType pUUIDCreationType = CREATE_FROM_UUID);

  /**
   * @brief Initializes an uninitialized Id.
   * The UUID gets generated here.
   *
   * @param pDescription Description of the Id.
   * @throw mars::common::exception::SetParamException
   */
  void initialize() noexcept(false);

  /**
   * @brief Initializes an uninitialized Id with an already initialized UUID.
   *
   * @param pUUID Unique identifier generated by boost. Only allowed to be generated by this class!
   * @param pDescription Description of the Id.
   * @throw mars::common::exception::SetParamException
   */
  void initialize(const UUID& pUUID, const std::string& pDescription = "") noexcept(false);

  /**
   * @brief Initializes an uninitialized Id with an already initialized UUID or from a name.
   *
   * @param pUUID Unique identifier generated by boost. Only allowed to be generated by this class!
   * @param pDescription Description of the Id.
   * @param pUUIDCreationType type of the uuid string for the id creation.
   * @throw mars::common::exception::SetParamException
   */
  void initialize(const std::string& pUUID, const std::string& pDescription = "",
                  UUIDCreationType pUUIDCreationType =
                      CREATE_FROM_UUID) noexcept(false);

  /**
   * @brief Primitive setter for the description.
   *
   * @param pDescription Description of the Id.
   */
  void setDescription(const std::string& pDescription);

  /**
   * @brief Primitive getter for the UUID.
   *
   * @return the UUID of this Id.
   * @throw mars::common::exception::NotInitializedException
   */
  const UUID& getUUID(void) const noexcept(false);

  /**
   * @brief Primitive getter for the UUID.
   * @return the UUID of this Id.
   * @throw mars::common::exception::NotInitializedException
   */
  std::string getUUIDAsString(UUIDFormat pFormat = UUIDFormat::BYTEWISE) const
      noexcept(false);

  /**
   * @brief Primitive getter for the description.
   *
   * @return The description of this Id.
   */
  std::string getDescription(void) const;

  /**
   * @brief Primitive getter for the initialization.
   *
   * @return true, if the Id is initialized.
   */
  bool isInitialized(void) const;

  /**
   * @brief Primitive comparator for another Id.
   *
   * @param pOtherId The other Id to compare with this Id.
   * @return true, if the UUIDs of both Ids are equal.
   */
  bool operator==(const Id& pOtherId) const;

  bool operator!=(const Id& pOtherId) const;

  mars_common_msgs::Id toMsg() const;

  static std::vector<mars_common_msgs::Id> convertToMsgId(const std::vector<mars::common::Id>& ids);

  static mars_common_msgs::Id convertToMsgId(const mars::common::Id& id);

  static std::vector<mars::common::Id> createId(const std::vector<std::string>& ids);

  static mars::common::Id createId(const std::string& id, const std::string& description = "");

  static mars::common::Id createInvalidId();

private:
  static boost::uuids::random_generator mUUIDRandomGen;
  static boost::uuids::name_generator mUUIDNameGen;
  static boost::uuids::string_generator mUUIDStringGen;

  UUID mUUID; /**< Unique identifier generated by boost library */

  /**
   * @brief mDescription Description of the matching object
   */
  std::string mDescription; /**< Description of the matching object */

  bool mIsInitialized; /**< True, if the Id is initialized with a valid UUID */
};

inline bool operator<(const Id& pId1, const Id& pId2) { return (pId1.getUUID() < pId2.getUUID()); }
} // namespace common
} // namespace mars

namespace std
{
string to_string(const mars::common::Id& pId);
string to_string(const mars::common::UUID& pUUID);
// hashing func for an Id
template <> struct hash<mars::common::Id>
{
  unsigned long operator()(const mars::common::Id& key) const
  {
    unsigned long lHash = std::hash<string>()(key.getUUIDAsString());
    return lHash;
  }
};

template <> struct hash<std::pair<mars::common::Id, mars::common::Id>>
{
  unsigned long operator()(const std::pair<mars::common::Id, mars::common::Id>& key) const
  {
    std::size_t seed = 17;

    seed = seed * 31 + std::hash<mars::common::Id>()(key.first);
    seed = seed * 31 + std::hash<mars::common::Id>()(key.second);

    return seed;
  }
};
} // namespace std

#endif // MARS_COMMON_ID_H
